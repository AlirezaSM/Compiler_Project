Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> assign
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> idlist COLON type SEMICOLON
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 17    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 18    paramdecs -> paramdecslist
Rule 19    paramdecs -> <empty>
Rule 20    paramdecslist -> paramdec
Rule 21    paramdecslist -> paramdecslist COMMA paramdec
Rule 22    paramdec -> ID COLON type
Rule 23    paramdec -> ID LSB RSB COLON type
Rule 24    block -> LCB stmtlist RCB
Rule 25    block -> LCB RCB
Rule 26    stmtlist -> stmt
Rule 27    stmtlist -> stmtlist stmt
Rule 28    lvalue -> ID
Rule 29    lvalue -> ID LSB exp RSB
Rule 30    case -> WHERE const COLON stmtlist
Rule 31    cases -> case
Rule 32    cases -> cases case
Rule 33    stmt -> RETURN exp SEMICOLON
Rule 34    stmt -> exp SEMICOLON
Rule 35    stmt -> block
Rule 36    stmt -> vardec
Rule 37    stmt -> WHILE LRB exp RRB stmt
Rule 38    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 39    stmt -> ON LRB exp RRB LCB RCB SEMICOLON
Rule 40    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 41    stmt -> FOR LRB ID IN ID RRB stmt
Rule 42    stmt -> IF LRB exp RRB stmt elseiflist
Rule 43    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 44    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 45    elseiflist -> ELSEIF LRB exp RRB stmt
Rule 46    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 47    elseiflist -> <empty>
Rule 48    relopexp -> exp relop exp
Rule 49    relopexp -> relopexp relop exp
Rule 50    exp -> assign
Rule 51    exp -> exp operator exp
Rule 52    exp -> relopexp
Rule 53    exp -> const
Rule 54    exp -> lvalue
Rule 55    exp -> ID LRB explist RRB
Rule 56    exp -> LRB exp RRB
Rule 57    exp -> ID LRB RRB
Rule 58    exp -> SUB exp
Rule 59    exp -> NOT exp
Rule 60    assign -> lvalue ASSIGN exp
Rule 61    operator -> AND
Rule 62    operator -> OR
Rule 63    operator -> SUM
Rule 64    operator -> SUB
Rule 65    operator -> MUL
Rule 66    operator -> DIV
Rule 67    operator -> MOD
Rule 68    const -> INTEGERNUMBER
Rule 69    const -> FLOATNUMBER
Rule 70    const -> TRUE
Rule 71    const -> FALSE
Rule 72    relop -> GT
Rule 73    relop -> LT
Rule 74    relop -> NE
Rule 75    relop -> EQ
Rule 76    relop -> LE
Rule 77    relop -> GE
Rule 78    explist -> exp
Rule 79    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 61
ASSIGN               : 60
BOOLEAN              : 9
COLON                : 15 16 22 23 30
COMMA                : 14 21 79
DIV                  : 66
ELSE                 : 43
ELSEIF               : 45 46
EQ                   : 75
ERROR                : 
FALSE                : 71
FLOAT                : 8
FLOATNUMBER          : 69
FOR                  : 40 41
FUNCTION             : 16 17
GE                   : 77
GT                   : 72
ID                   : 10 11 16 17 22 23 28 29 41 41 44 55 57
IF                   : 42 43
IN                   : 41
INTEGER              : 7
INTEGERNUMBER        : 68
LCB                  : 24 25 38 39
LE                   : 76
LRB                  : 1 2 16 17 37 38 39 40 41 42 43 44 45 46 55 56 57
LSB                  : 11 23 29
LT                   : 73
MAIN                 : 1 2
MOD                  : 67
MUL                  : 65
NE                   : 74
NOT                  : 59
ON                   : 38 39
OR                   : 62
PRINT                : 44
RCB                  : 24 25 38 39
RETURN               : 33
RRB                  : 1 2 16 17 37 38 39 40 41 42 43 44 45 46 55 56 57
RSB                  : 11 23 29
SEMICOLON            : 15 33 34 38 39 40 40 44
SUB                  : 58 64
SUM                  : 63
TRUE                 : 70
WHERE                : 30
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

assign               : 12 50
block                : 1 2 16 17 35
case                 : 31 32
cases                : 32 38
const                : 30 53
dec                  : 3 4
declist              : 1 4
elseiflist           : 42 43 46
exp                  : 11 29 33 34 37 38 39 40 40 40 42 43 45 46 48 48 49 51 51 56 58 59 60 78 79
explist              : 55 79
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
lvalue               : 54 60
operator             : 51
paramdec             : 20 21
paramdecs            : 16 17
paramdecslist        : 18 21
program              : 0
relop                : 48 49
relopexp             : 49 52
stmt                 : 26 27 37 40 41 42 43 43 45 46
stmtlist             : 24 27 30
type                 : 15 16 22 23
vardec               : 5 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (60) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (60) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 13
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 14
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 15


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    FUNCTION        reduce using rule 3 (declist -> dec .)
    ID              reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 16
    COMMA           shift and go to state 17


state 8

    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 18


state 9

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 19
    ASSIGN          reduce using rule 28 (lvalue -> ID .)


state 10

    (13) idlist -> iddec .

    COLON           reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 11

    (12) iddec -> assign .

    COLON           reduce using rule 12 (iddec -> assign .)
    COMMA           reduce using rule 12 (iddec -> assign .)


state 12

    (60) assign -> lvalue . ASSIGN exp

    ASSIGN          shift and go to state 20


state 13

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 21


state 14

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    FUNCTION        reduce using rule 4 (declist -> declist dec .)
    ID              reduce using rule 4 (declist -> declist dec .)


state 15

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 22


state 16

    (15) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 23

state 17

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (60) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 9

    iddec                          shift and go to state 27
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 18

    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 28


state 19

    (11) iddec -> ID LSB . exp RSB
    (29) lvalue -> ID LSB . exp RSB
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 30
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 20

    (60) assign -> lvalue ASSIGN . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    lvalue                         shift and go to state 34
    exp                            shift and go to state 42
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33

state 21

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 43


state 22

    (2) program -> MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 45

    block                          shift and go to state 44

state 23

    (15) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 46


state 24

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 25

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 26

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 27

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 28

    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (18) paramdecs -> . paramdecslist
    (19) paramdecs -> .
    (20) paramdecslist -> . paramdec
    (21) paramdecslist -> . paramdecslist COMMA paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 19 (paramdecs -> .)
    ID              shift and go to state 47

    paramdecs                      shift and go to state 48
    paramdecslist                  shift and go to state 49
    paramdec                       shift and go to state 50

state 29

    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 51
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    RSB             reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    COLON           reduce using rule 28 (lvalue -> ID .)
    COMMA           reduce using rule 28 (lvalue -> ID .)
    RRB             reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 52


state 30

    (11) iddec -> ID LSB exp . RSB
    (29) lvalue -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             shift and go to state 53
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 31

    (50) exp -> assign .

    RSB             reduce using rule 50 (exp -> assign .)
    AND             reduce using rule 50 (exp -> assign .)
    OR              reduce using rule 50 (exp -> assign .)
    SUM             reduce using rule 50 (exp -> assign .)
    SUB             reduce using rule 50 (exp -> assign .)
    MUL             reduce using rule 50 (exp -> assign .)
    DIV             reduce using rule 50 (exp -> assign .)
    MOD             reduce using rule 50 (exp -> assign .)
    GT              reduce using rule 50 (exp -> assign .)
    LT              reduce using rule 50 (exp -> assign .)
    NE              reduce using rule 50 (exp -> assign .)
    EQ              reduce using rule 50 (exp -> assign .)
    LE              reduce using rule 50 (exp -> assign .)
    GE              reduce using rule 50 (exp -> assign .)
    COLON           reduce using rule 50 (exp -> assign .)
    COMMA           reduce using rule 50 (exp -> assign .)
    RRB             reduce using rule 50 (exp -> assign .)
    SEMICOLON       reduce using rule 50 (exp -> assign .)


state 32

    (52) exp -> relopexp .
    (49) relopexp -> relopexp . relop exp
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             reduce using rule 52 (exp -> relopexp .)
    AND             reduce using rule 52 (exp -> relopexp .)
    OR              reduce using rule 52 (exp -> relopexp .)
    SUM             reduce using rule 52 (exp -> relopexp .)
    SUB             reduce using rule 52 (exp -> relopexp .)
    MUL             reduce using rule 52 (exp -> relopexp .)
    DIV             reduce using rule 52 (exp -> relopexp .)
    MOD             reduce using rule 52 (exp -> relopexp .)
    COLON           reduce using rule 52 (exp -> relopexp .)
    COMMA           reduce using rule 52 (exp -> relopexp .)
    RRB             reduce using rule 52 (exp -> relopexp .)
    SEMICOLON       reduce using rule 52 (exp -> relopexp .)
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

  ! GT              [ reduce using rule 52 (exp -> relopexp .) ]
  ! LT              [ reduce using rule 52 (exp -> relopexp .) ]
  ! NE              [ reduce using rule 52 (exp -> relopexp .) ]
  ! EQ              [ reduce using rule 52 (exp -> relopexp .) ]
  ! LE              [ reduce using rule 52 (exp -> relopexp .) ]
  ! GE              [ reduce using rule 52 (exp -> relopexp .) ]

    relop                          shift and go to state 69

state 33

    (53) exp -> const .

    RSB             reduce using rule 53 (exp -> const .)
    AND             reduce using rule 53 (exp -> const .)
    OR              reduce using rule 53 (exp -> const .)
    SUM             reduce using rule 53 (exp -> const .)
    SUB             reduce using rule 53 (exp -> const .)
    MUL             reduce using rule 53 (exp -> const .)
    DIV             reduce using rule 53 (exp -> const .)
    MOD             reduce using rule 53 (exp -> const .)
    GT              reduce using rule 53 (exp -> const .)
    LT              reduce using rule 53 (exp -> const .)
    NE              reduce using rule 53 (exp -> const .)
    EQ              reduce using rule 53 (exp -> const .)
    LE              reduce using rule 53 (exp -> const .)
    GE              reduce using rule 53 (exp -> const .)
    COLON           reduce using rule 53 (exp -> const .)
    COMMA           reduce using rule 53 (exp -> const .)
    RRB             reduce using rule 53 (exp -> const .)
    SEMICOLON       reduce using rule 53 (exp -> const .)


state 34

    (54) exp -> lvalue .
    (60) assign -> lvalue . ASSIGN exp

    RSB             reduce using rule 54 (exp -> lvalue .)
    AND             reduce using rule 54 (exp -> lvalue .)
    OR              reduce using rule 54 (exp -> lvalue .)
    SUM             reduce using rule 54 (exp -> lvalue .)
    SUB             reduce using rule 54 (exp -> lvalue .)
    MUL             reduce using rule 54 (exp -> lvalue .)
    DIV             reduce using rule 54 (exp -> lvalue .)
    MOD             reduce using rule 54 (exp -> lvalue .)
    GT              reduce using rule 54 (exp -> lvalue .)
    LT              reduce using rule 54 (exp -> lvalue .)
    NE              reduce using rule 54 (exp -> lvalue .)
    EQ              reduce using rule 54 (exp -> lvalue .)
    LE              reduce using rule 54 (exp -> lvalue .)
    GE              reduce using rule 54 (exp -> lvalue .)
    COLON           reduce using rule 54 (exp -> lvalue .)
    COMMA           reduce using rule 54 (exp -> lvalue .)
    RRB             reduce using rule 54 (exp -> lvalue .)
    SEMICOLON       reduce using rule 54 (exp -> lvalue .)
    ASSIGN          shift and go to state 20


state 35

    (56) exp -> LRB . exp RRB
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 70
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 36

    (58) exp -> SUB . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 71
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 37

    (59) exp -> NOT . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 72
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 38

    (68) const -> INTEGERNUMBER .

    RSB             reduce using rule 68 (const -> INTEGERNUMBER .)
    AND             reduce using rule 68 (const -> INTEGERNUMBER .)
    OR              reduce using rule 68 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 68 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 68 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 68 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 68 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 68 (const -> INTEGERNUMBER .)
    GT              reduce using rule 68 (const -> INTEGERNUMBER .)
    LT              reduce using rule 68 (const -> INTEGERNUMBER .)
    NE              reduce using rule 68 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 68 (const -> INTEGERNUMBER .)
    LE              reduce using rule 68 (const -> INTEGERNUMBER .)
    GE              reduce using rule 68 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 68 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 68 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 68 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 68 (const -> INTEGERNUMBER .)


state 39

    (69) const -> FLOATNUMBER .

    RSB             reduce using rule 69 (const -> FLOATNUMBER .)
    AND             reduce using rule 69 (const -> FLOATNUMBER .)
    OR              reduce using rule 69 (const -> FLOATNUMBER .)
    SUM             reduce using rule 69 (const -> FLOATNUMBER .)
    SUB             reduce using rule 69 (const -> FLOATNUMBER .)
    MUL             reduce using rule 69 (const -> FLOATNUMBER .)
    DIV             reduce using rule 69 (const -> FLOATNUMBER .)
    MOD             reduce using rule 69 (const -> FLOATNUMBER .)
    GT              reduce using rule 69 (const -> FLOATNUMBER .)
    LT              reduce using rule 69 (const -> FLOATNUMBER .)
    NE              reduce using rule 69 (const -> FLOATNUMBER .)
    EQ              reduce using rule 69 (const -> FLOATNUMBER .)
    LE              reduce using rule 69 (const -> FLOATNUMBER .)
    GE              reduce using rule 69 (const -> FLOATNUMBER .)
    COLON           reduce using rule 69 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 69 (const -> FLOATNUMBER .)
    RRB             reduce using rule 69 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 69 (const -> FLOATNUMBER .)


state 40

    (70) const -> TRUE .

    RSB             reduce using rule 70 (const -> TRUE .)
    AND             reduce using rule 70 (const -> TRUE .)
    OR              reduce using rule 70 (const -> TRUE .)
    SUM             reduce using rule 70 (const -> TRUE .)
    SUB             reduce using rule 70 (const -> TRUE .)
    MUL             reduce using rule 70 (const -> TRUE .)
    DIV             reduce using rule 70 (const -> TRUE .)
    MOD             reduce using rule 70 (const -> TRUE .)
    GT              reduce using rule 70 (const -> TRUE .)
    LT              reduce using rule 70 (const -> TRUE .)
    NE              reduce using rule 70 (const -> TRUE .)
    EQ              reduce using rule 70 (const -> TRUE .)
    LE              reduce using rule 70 (const -> TRUE .)
    GE              reduce using rule 70 (const -> TRUE .)
    COLON           reduce using rule 70 (const -> TRUE .)
    COMMA           reduce using rule 70 (const -> TRUE .)
    RRB             reduce using rule 70 (const -> TRUE .)
    SEMICOLON       reduce using rule 70 (const -> TRUE .)


state 41

    (71) const -> FALSE .

    RSB             reduce using rule 71 (const -> FALSE .)
    AND             reduce using rule 71 (const -> FALSE .)
    OR              reduce using rule 71 (const -> FALSE .)
    SUM             reduce using rule 71 (const -> FALSE .)
    SUB             reduce using rule 71 (const -> FALSE .)
    MUL             reduce using rule 71 (const -> FALSE .)
    DIV             reduce using rule 71 (const -> FALSE .)
    MOD             reduce using rule 71 (const -> FALSE .)
    GT              reduce using rule 71 (const -> FALSE .)
    LT              reduce using rule 71 (const -> FALSE .)
    NE              reduce using rule 71 (const -> FALSE .)
    EQ              reduce using rule 71 (const -> FALSE .)
    LE              reduce using rule 71 (const -> FALSE .)
    GE              reduce using rule 71 (const -> FALSE .)
    COLON           reduce using rule 71 (const -> FALSE .)
    COMMA           reduce using rule 71 (const -> FALSE .)
    RRB             reduce using rule 71 (const -> FALSE .)
    SEMICOLON       reduce using rule 71 (const -> FALSE .)


state 42

    (60) assign -> lvalue ASSIGN exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    COLON           reduce using rule 60 (assign -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 60 (assign -> lvalue ASSIGN exp .)
    RSB             reduce using rule 60 (assign -> lvalue ASSIGN exp .)
    RRB             reduce using rule 60 (assign -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 60 (assign -> lvalue ASSIGN exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

  ! AND             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! GT              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 60 (assign -> lvalue ASSIGN exp .) ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 43

    (1) program -> declist MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 45

    block                          shift and go to state 73

state 44

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 45

    (24) block -> LCB . stmtlist RCB
    (25) block -> LCB . RCB
    (26) stmtlist -> . stmt
    (27) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             shift and go to state 75
    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    stmtlist                       shift and go to state 74
    stmt                           shift and go to state 76
    exp                            shift and go to state 78
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 46

    (15) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)


state 47

    (22) paramdec -> ID . COLON type
    (23) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 88
    LSB             shift and go to state 89


state 48

    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 90


state 49

    (18) paramdecs -> paramdecslist .
    (21) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 18 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 91


state 50

    (20) paramdecslist -> paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdec .)


state 51

    (55) exp -> ID LRB . explist RRB
    (57) exp -> ID LRB . RRB
    (78) explist -> . exp
    (79) explist -> . explist COMMA exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    RRB             shift and go to state 93
    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    explist                        shift and go to state 92
    exp                            shift and go to state 94
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 52

    (29) lvalue -> ID LSB . exp RSB
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 95
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 53

    (11) iddec -> ID LSB exp RSB .
    (29) lvalue -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 54

    (51) exp -> exp operator . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 96
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 55

    (48) relopexp -> exp relop . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 97
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 56

    (61) operator -> AND .

    ID              reduce using rule 61 (operator -> AND .)
    LRB             reduce using rule 61 (operator -> AND .)
    SUB             reduce using rule 61 (operator -> AND .)
    NOT             reduce using rule 61 (operator -> AND .)
    INTEGERNUMBER   reduce using rule 61 (operator -> AND .)
    FLOATNUMBER     reduce using rule 61 (operator -> AND .)
    TRUE            reduce using rule 61 (operator -> AND .)
    FALSE           reduce using rule 61 (operator -> AND .)


state 57

    (62) operator -> OR .

    ID              reduce using rule 62 (operator -> OR .)
    LRB             reduce using rule 62 (operator -> OR .)
    SUB             reduce using rule 62 (operator -> OR .)
    NOT             reduce using rule 62 (operator -> OR .)
    INTEGERNUMBER   reduce using rule 62 (operator -> OR .)
    FLOATNUMBER     reduce using rule 62 (operator -> OR .)
    TRUE            reduce using rule 62 (operator -> OR .)
    FALSE           reduce using rule 62 (operator -> OR .)


state 58

    (63) operator -> SUM .

    ID              reduce using rule 63 (operator -> SUM .)
    LRB             reduce using rule 63 (operator -> SUM .)
    SUB             reduce using rule 63 (operator -> SUM .)
    NOT             reduce using rule 63 (operator -> SUM .)
    INTEGERNUMBER   reduce using rule 63 (operator -> SUM .)
    FLOATNUMBER     reduce using rule 63 (operator -> SUM .)
    TRUE            reduce using rule 63 (operator -> SUM .)
    FALSE           reduce using rule 63 (operator -> SUM .)


state 59

    (64) operator -> SUB .

    ID              reduce using rule 64 (operator -> SUB .)
    LRB             reduce using rule 64 (operator -> SUB .)
    SUB             reduce using rule 64 (operator -> SUB .)
    NOT             reduce using rule 64 (operator -> SUB .)
    INTEGERNUMBER   reduce using rule 64 (operator -> SUB .)
    FLOATNUMBER     reduce using rule 64 (operator -> SUB .)
    TRUE            reduce using rule 64 (operator -> SUB .)
    FALSE           reduce using rule 64 (operator -> SUB .)


state 60

    (65) operator -> MUL .

    ID              reduce using rule 65 (operator -> MUL .)
    LRB             reduce using rule 65 (operator -> MUL .)
    SUB             reduce using rule 65 (operator -> MUL .)
    NOT             reduce using rule 65 (operator -> MUL .)
    INTEGERNUMBER   reduce using rule 65 (operator -> MUL .)
    FLOATNUMBER     reduce using rule 65 (operator -> MUL .)
    TRUE            reduce using rule 65 (operator -> MUL .)
    FALSE           reduce using rule 65 (operator -> MUL .)


state 61

    (66) operator -> DIV .

    ID              reduce using rule 66 (operator -> DIV .)
    LRB             reduce using rule 66 (operator -> DIV .)
    SUB             reduce using rule 66 (operator -> DIV .)
    NOT             reduce using rule 66 (operator -> DIV .)
    INTEGERNUMBER   reduce using rule 66 (operator -> DIV .)
    FLOATNUMBER     reduce using rule 66 (operator -> DIV .)
    TRUE            reduce using rule 66 (operator -> DIV .)
    FALSE           reduce using rule 66 (operator -> DIV .)


state 62

    (67) operator -> MOD .

    ID              reduce using rule 67 (operator -> MOD .)
    LRB             reduce using rule 67 (operator -> MOD .)
    SUB             reduce using rule 67 (operator -> MOD .)
    NOT             reduce using rule 67 (operator -> MOD .)
    INTEGERNUMBER   reduce using rule 67 (operator -> MOD .)
    FLOATNUMBER     reduce using rule 67 (operator -> MOD .)
    TRUE            reduce using rule 67 (operator -> MOD .)
    FALSE           reduce using rule 67 (operator -> MOD .)


state 63

    (72) relop -> GT .

    ID              reduce using rule 72 (relop -> GT .)
    LRB             reduce using rule 72 (relop -> GT .)
    SUB             reduce using rule 72 (relop -> GT .)
    NOT             reduce using rule 72 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 72 (relop -> GT .)
    FLOATNUMBER     reduce using rule 72 (relop -> GT .)
    TRUE            reduce using rule 72 (relop -> GT .)
    FALSE           reduce using rule 72 (relop -> GT .)


state 64

    (73) relop -> LT .

    ID              reduce using rule 73 (relop -> LT .)
    LRB             reduce using rule 73 (relop -> LT .)
    SUB             reduce using rule 73 (relop -> LT .)
    NOT             reduce using rule 73 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 73 (relop -> LT .)
    FLOATNUMBER     reduce using rule 73 (relop -> LT .)
    TRUE            reduce using rule 73 (relop -> LT .)
    FALSE           reduce using rule 73 (relop -> LT .)


state 65

    (74) relop -> NE .

    ID              reduce using rule 74 (relop -> NE .)
    LRB             reduce using rule 74 (relop -> NE .)
    SUB             reduce using rule 74 (relop -> NE .)
    NOT             reduce using rule 74 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 74 (relop -> NE .)
    FLOATNUMBER     reduce using rule 74 (relop -> NE .)
    TRUE            reduce using rule 74 (relop -> NE .)
    FALSE           reduce using rule 74 (relop -> NE .)


state 66

    (75) relop -> EQ .

    ID              reduce using rule 75 (relop -> EQ .)
    LRB             reduce using rule 75 (relop -> EQ .)
    SUB             reduce using rule 75 (relop -> EQ .)
    NOT             reduce using rule 75 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 75 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 75 (relop -> EQ .)
    TRUE            reduce using rule 75 (relop -> EQ .)
    FALSE           reduce using rule 75 (relop -> EQ .)


state 67

    (76) relop -> LE .

    ID              reduce using rule 76 (relop -> LE .)
    LRB             reduce using rule 76 (relop -> LE .)
    SUB             reduce using rule 76 (relop -> LE .)
    NOT             reduce using rule 76 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 76 (relop -> LE .)
    FLOATNUMBER     reduce using rule 76 (relop -> LE .)
    TRUE            reduce using rule 76 (relop -> LE .)
    FALSE           reduce using rule 76 (relop -> LE .)


state 68

    (77) relop -> GE .

    ID              reduce using rule 77 (relop -> GE .)
    LRB             reduce using rule 77 (relop -> GE .)
    SUB             reduce using rule 77 (relop -> GE .)
    NOT             reduce using rule 77 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 77 (relop -> GE .)
    FLOATNUMBER     reduce using rule 77 (relop -> GE .)
    TRUE            reduce using rule 77 (relop -> GE .)
    FALSE           reduce using rule 77 (relop -> GE .)


state 69

    (49) relopexp -> relopexp relop . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    relopexp                       shift and go to state 32
    exp                            shift and go to state 98
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 70

    (56) exp -> LRB exp . RRB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 99
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 71

    (58) exp -> SUB exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             reduce using rule 58 (exp -> SUB exp .)
    AND             reduce using rule 58 (exp -> SUB exp .)
    OR              reduce using rule 58 (exp -> SUB exp .)
    SUM             reduce using rule 58 (exp -> SUB exp .)
    SUB             reduce using rule 58 (exp -> SUB exp .)
    GT              reduce using rule 58 (exp -> SUB exp .)
    LT              reduce using rule 58 (exp -> SUB exp .)
    NE              reduce using rule 58 (exp -> SUB exp .)
    EQ              reduce using rule 58 (exp -> SUB exp .)
    LE              reduce using rule 58 (exp -> SUB exp .)
    GE              reduce using rule 58 (exp -> SUB exp .)
    COLON           reduce using rule 58 (exp -> SUB exp .)
    COMMA           reduce using rule 58 (exp -> SUB exp .)
    RRB             reduce using rule 58 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 58 (exp -> SUB exp .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62

  ! MUL             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! GT              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! NE              [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 72

    (59) exp -> NOT exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             reduce using rule 59 (exp -> NOT exp .)
    AND             reduce using rule 59 (exp -> NOT exp .)
    OR              reduce using rule 59 (exp -> NOT exp .)
    SUM             reduce using rule 59 (exp -> NOT exp .)
    SUB             reduce using rule 59 (exp -> NOT exp .)
    MUL             reduce using rule 59 (exp -> NOT exp .)
    DIV             reduce using rule 59 (exp -> NOT exp .)
    MOD             reduce using rule 59 (exp -> NOT exp .)
    GT              reduce using rule 59 (exp -> NOT exp .)
    LT              reduce using rule 59 (exp -> NOT exp .)
    NE              reduce using rule 59 (exp -> NOT exp .)
    EQ              reduce using rule 59 (exp -> NOT exp .)
    LE              reduce using rule 59 (exp -> NOT exp .)
    GE              reduce using rule 59 (exp -> NOT exp .)
    COLON           reduce using rule 59 (exp -> NOT exp .)
    COMMA           reduce using rule 59 (exp -> NOT exp .)
    RRB             reduce using rule 59 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 59 (exp -> NOT exp .)

  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! SUM             [ shift and go to state 58 ]
  ! SUB             [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! GT              [ shift and go to state 63 ]
  ! LT              [ shift and go to state 64 ]
  ! NE              [ shift and go to state 65 ]
  ! EQ              [ shift and go to state 66 ]
  ! LE              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 73

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 74

    (24) block -> LCB stmtlist . RCB
    (27) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             shift and go to state 100
    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    stmt                           shift and go to state 101
    exp                            shift and go to state 78
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 75

    (25) block -> LCB RCB .

    $end            reduce using rule 25 (block -> LCB RCB .)
    RCB             reduce using rule 25 (block -> LCB RCB .)
    RETURN          reduce using rule 25 (block -> LCB RCB .)
    WHILE           reduce using rule 25 (block -> LCB RCB .)
    ON              reduce using rule 25 (block -> LCB RCB .)
    FOR             reduce using rule 25 (block -> LCB RCB .)
    IF              reduce using rule 25 (block -> LCB RCB .)
    PRINT           reduce using rule 25 (block -> LCB RCB .)
    ID              reduce using rule 25 (block -> LCB RCB .)
    LRB             reduce using rule 25 (block -> LCB RCB .)
    SUB             reduce using rule 25 (block -> LCB RCB .)
    NOT             reduce using rule 25 (block -> LCB RCB .)
    LCB             reduce using rule 25 (block -> LCB RCB .)
    INTEGERNUMBER   reduce using rule 25 (block -> LCB RCB .)
    FLOATNUMBER     reduce using rule 25 (block -> LCB RCB .)
    TRUE            reduce using rule 25 (block -> LCB RCB .)
    FALSE           reduce using rule 25 (block -> LCB RCB .)
    MAIN            reduce using rule 25 (block -> LCB RCB .)
    FUNCTION        reduce using rule 25 (block -> LCB RCB .)
    ELSEIF          reduce using rule 25 (block -> LCB RCB .)
    ELSE            reduce using rule 25 (block -> LCB RCB .)
    WHERE           reduce using rule 25 (block -> LCB RCB .)


state 76

    (26) stmtlist -> stmt .

    RCB             reduce using rule 26 (stmtlist -> stmt .)
    RETURN          reduce using rule 26 (stmtlist -> stmt .)
    WHILE           reduce using rule 26 (stmtlist -> stmt .)
    ON              reduce using rule 26 (stmtlist -> stmt .)
    FOR             reduce using rule 26 (stmtlist -> stmt .)
    IF              reduce using rule 26 (stmtlist -> stmt .)
    PRINT           reduce using rule 26 (stmtlist -> stmt .)
    ID              reduce using rule 26 (stmtlist -> stmt .)
    LRB             reduce using rule 26 (stmtlist -> stmt .)
    SUB             reduce using rule 26 (stmtlist -> stmt .)
    NOT             reduce using rule 26 (stmtlist -> stmt .)
    LCB             reduce using rule 26 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 26 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 26 (stmtlist -> stmt .)
    TRUE            reduce using rule 26 (stmtlist -> stmt .)
    FALSE           reduce using rule 26 (stmtlist -> stmt .)
    WHERE           reduce using rule 26 (stmtlist -> stmt .)


state 77

    (33) stmt -> RETURN . exp SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 102
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 78

    (34) stmt -> exp . SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    SEMICOLON       shift and go to state 103
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 79

    (35) stmt -> block .

    RCB             reduce using rule 35 (stmt -> block .)
    RETURN          reduce using rule 35 (stmt -> block .)
    WHILE           reduce using rule 35 (stmt -> block .)
    ON              reduce using rule 35 (stmt -> block .)
    FOR             reduce using rule 35 (stmt -> block .)
    IF              reduce using rule 35 (stmt -> block .)
    PRINT           reduce using rule 35 (stmt -> block .)
    ID              reduce using rule 35 (stmt -> block .)
    LRB             reduce using rule 35 (stmt -> block .)
    SUB             reduce using rule 35 (stmt -> block .)
    NOT             reduce using rule 35 (stmt -> block .)
    LCB             reduce using rule 35 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> block .)
    FLOATNUMBER     reduce using rule 35 (stmt -> block .)
    TRUE            reduce using rule 35 (stmt -> block .)
    FALSE           reduce using rule 35 (stmt -> block .)
    ELSEIF          reduce using rule 35 (stmt -> block .)
    ELSE            reduce using rule 35 (stmt -> block .)
    WHERE           reduce using rule 35 (stmt -> block .)


state 80

    (36) stmt -> vardec .

    RCB             reduce using rule 36 (stmt -> vardec .)
    RETURN          reduce using rule 36 (stmt -> vardec .)
    WHILE           reduce using rule 36 (stmt -> vardec .)
    ON              reduce using rule 36 (stmt -> vardec .)
    FOR             reduce using rule 36 (stmt -> vardec .)
    IF              reduce using rule 36 (stmt -> vardec .)
    PRINT           reduce using rule 36 (stmt -> vardec .)
    ID              reduce using rule 36 (stmt -> vardec .)
    LRB             reduce using rule 36 (stmt -> vardec .)
    SUB             reduce using rule 36 (stmt -> vardec .)
    NOT             reduce using rule 36 (stmt -> vardec .)
    LCB             reduce using rule 36 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 36 (stmt -> vardec .)
    TRUE            reduce using rule 36 (stmt -> vardec .)
    FALSE           reduce using rule 36 (stmt -> vardec .)
    ELSEIF          reduce using rule 36 (stmt -> vardec .)
    ELSE            reduce using rule 36 (stmt -> vardec .)
    WHERE           reduce using rule 36 (stmt -> vardec .)


state 81

    (37) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 104


state 82

    (38) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON . LRB exp RRB LCB RCB SEMICOLON

    LRB             shift and go to state 105


state 83

    (40) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 106


state 84

    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB

    LRB             shift and go to state 51
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 107
    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)


state 85

    (42) stmt -> IF . LRB exp RRB stmt elseiflist
    (43) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 108


state 86

    (44) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 109


state 87

    (50) exp -> assign .
    (12) iddec -> assign .

    SEMICOLON       reduce using rule 50 (exp -> assign .)
    AND             reduce using rule 50 (exp -> assign .)
    OR              reduce using rule 50 (exp -> assign .)
    SUM             reduce using rule 50 (exp -> assign .)
    SUB             reduce using rule 50 (exp -> assign .)
    MUL             reduce using rule 50 (exp -> assign .)
    DIV             reduce using rule 50 (exp -> assign .)
    MOD             reduce using rule 50 (exp -> assign .)
    GT              reduce using rule 50 (exp -> assign .)
    LT              reduce using rule 50 (exp -> assign .)
    NE              reduce using rule 50 (exp -> assign .)
    EQ              reduce using rule 50 (exp -> assign .)
    LE              reduce using rule 50 (exp -> assign .)
    GE              reduce using rule 50 (exp -> assign .)
    COLON           reduce using rule 12 (iddec -> assign .)
    COMMA           reduce using rule 12 (iddec -> assign .)


state 88

    (22) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 110

state 89

    (23) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 111


state 90

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    COLON           shift and go to state 112
    LCB             shift and go to state 45

    block                          shift and go to state 113

state 91

    (21) paramdecslist -> paramdecslist COMMA . paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 47

    paramdec                       shift and go to state 114

state 92

    (55) exp -> ID LRB explist . RRB
    (79) explist -> explist . COMMA exp

    RRB             shift and go to state 115
    COMMA           shift and go to state 116


state 93

    (57) exp -> ID LRB RRB .

    RSB             reduce using rule 57 (exp -> ID LRB RRB .)
    AND             reduce using rule 57 (exp -> ID LRB RRB .)
    OR              reduce using rule 57 (exp -> ID LRB RRB .)
    SUM             reduce using rule 57 (exp -> ID LRB RRB .)
    SUB             reduce using rule 57 (exp -> ID LRB RRB .)
    MUL             reduce using rule 57 (exp -> ID LRB RRB .)
    DIV             reduce using rule 57 (exp -> ID LRB RRB .)
    MOD             reduce using rule 57 (exp -> ID LRB RRB .)
    GT              reduce using rule 57 (exp -> ID LRB RRB .)
    LT              reduce using rule 57 (exp -> ID LRB RRB .)
    NE              reduce using rule 57 (exp -> ID LRB RRB .)
    EQ              reduce using rule 57 (exp -> ID LRB RRB .)
    LE              reduce using rule 57 (exp -> ID LRB RRB .)
    GE              reduce using rule 57 (exp -> ID LRB RRB .)
    COLON           reduce using rule 57 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 57 (exp -> ID LRB RRB .)
    RRB             reduce using rule 57 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 57 (exp -> ID LRB RRB .)


state 94

    (78) explist -> exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             reduce using rule 78 (explist -> exp .)
    COMMA           reduce using rule 78 (explist -> exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 95

    (29) lvalue -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             shift and go to state 117
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 96

    (51) exp -> exp operator exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             reduce using rule 51 (exp -> exp operator exp .)
    COLON           reduce using rule 51 (exp -> exp operator exp .)
    COMMA           reduce using rule 51 (exp -> exp operator exp .)
    RRB             reduce using rule 51 (exp -> exp operator exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp operator exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

  ! AND             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! OR              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! SUM             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 51 (exp -> exp operator exp .) ]

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 97

    (48) relopexp -> exp relop exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 48 (relopexp -> exp relop exp .)
    COLON           reduce using rule 48 (relopexp -> exp relop exp .)
    COMMA           reduce using rule 48 (relopexp -> exp relop exp .)
    RRB             reduce using rule 48 (relopexp -> exp relop exp .)
    SEMICOLON       reduce using rule 48 (relopexp -> exp relop exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

  ! GT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! NE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! GE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! AND             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! OR              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 48 (relopexp -> exp relop exp .) ]

    relop                          shift and go to state 55
    operator                       shift and go to state 54

state 98

    (49) relopexp -> relopexp relop exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    COLON           reduce using rule 49 (relopexp -> relopexp relop exp .)
    COMMA           reduce using rule 49 (relopexp -> relopexp relop exp .)
    RRB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    SEMICOLON       reduce using rule 49 (relopexp -> relopexp relop exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

  ! GT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! NE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! EQ              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! GE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! AND             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! OR              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUM             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUB             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MUL             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! DIV             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MOD             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]

    relop                          shift and go to state 55
    operator                       shift and go to state 54

state 99

    (56) exp -> LRB exp RRB .

    RSB             reduce using rule 56 (exp -> LRB exp RRB .)
    AND             reduce using rule 56 (exp -> LRB exp RRB .)
    OR              reduce using rule 56 (exp -> LRB exp RRB .)
    SUM             reduce using rule 56 (exp -> LRB exp RRB .)
    SUB             reduce using rule 56 (exp -> LRB exp RRB .)
    MUL             reduce using rule 56 (exp -> LRB exp RRB .)
    DIV             reduce using rule 56 (exp -> LRB exp RRB .)
    MOD             reduce using rule 56 (exp -> LRB exp RRB .)
    GT              reduce using rule 56 (exp -> LRB exp RRB .)
    LT              reduce using rule 56 (exp -> LRB exp RRB .)
    NE              reduce using rule 56 (exp -> LRB exp RRB .)
    EQ              reduce using rule 56 (exp -> LRB exp RRB .)
    LE              reduce using rule 56 (exp -> LRB exp RRB .)
    GE              reduce using rule 56 (exp -> LRB exp RRB .)
    COLON           reduce using rule 56 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 56 (exp -> LRB exp RRB .)
    RRB             reduce using rule 56 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 56 (exp -> LRB exp RRB .)


state 100

    (24) block -> LCB stmtlist RCB .

    $end            reduce using rule 24 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 24 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 24 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 24 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 24 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 24 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 24 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 24 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 24 (block -> LCB stmtlist RCB .)


state 101

    (27) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 27 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 27 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 27 (stmtlist -> stmtlist stmt .)


state 102

    (33) stmt -> RETURN exp . SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    SEMICOLON       shift and go to state 118
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 103

    (34) stmt -> exp SEMICOLON .

    RCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 34 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 34 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 34 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 34 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 34 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 34 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 34 (stmt -> exp SEMICOLON .)


state 104

    (37) stmt -> WHILE LRB . exp RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 119
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 105

    (38) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB . exp RRB LCB RCB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 120
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 106

    (40) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR LRB . ID IN ID RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 122
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 121
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 107

    (29) lvalue -> ID LSB . exp RSB
    (11) iddec -> ID LSB . exp RSB
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 123
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 108

    (42) stmt -> IF LRB . exp RRB stmt elseiflist
    (43) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 124
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 109

    (44) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 125


state 110

    (22) paramdec -> ID COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID COLON type .)


state 111

    (23) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 126


state 112

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 127

state 113

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 114

    (21) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)


state 115

    (55) exp -> ID LRB explist RRB .

    RSB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 55 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 55 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 55 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 55 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 55 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 55 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 55 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 55 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 55 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 55 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 55 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 55 (exp -> ID LRB explist RRB .)


state 116

    (79) explist -> explist COMMA . exp
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 128
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 117

    (29) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 118

    (33) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)


state 119

    (37) stmt -> WHILE LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 129
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 120

    (38) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp . RRB LCB RCB SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 130
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 121

    (40) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    SEMICOLON       shift and go to state 131
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 122

    (41) stmt -> FOR LRB ID . IN ID RRB stmt
    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 132
    LRB             shift and go to state 51
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 52


state 123

    (29) lvalue -> ID LSB exp . RSB
    (11) iddec -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RSB             shift and go to state 133
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 124

    (42) stmt -> IF LRB exp . RRB stmt elseiflist
    (43) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 134
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 125

    (44) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 135


state 126

    (23) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 136

state 127

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 45

    block                          shift and go to state 137

state 128

    (79) explist -> explist COMMA exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             reduce using rule 79 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 79 (explist -> explist COMMA exp .)
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 129

    (37) stmt -> WHILE LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 138
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 130

    (38) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB . LCB RCB SEMICOLON

    LCB             shift and go to state 139


state 131

    (40) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 140
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 132

    (41) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 141


state 133

    (29) lvalue -> ID LSB exp RSB .
    (11) iddec -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 134

    (42) stmt -> IF LRB exp RRB . stmt elseiflist
    (43) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 142
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 135

    (44) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 143


state 136

    (23) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)


state 137

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 138

    (37) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)


state 139

    (38) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB LCB . RCB SEMICOLON
    (31) cases -> . case
    (32) cases -> . cases case
    (30) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 145
    WHERE           shift and go to state 147

    cases                          shift and go to state 144
    case                           shift and go to state 146

state 140

    (40) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    SEMICOLON       shift and go to state 148
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 141

    (41) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 149


state 142

    (42) stmt -> IF LRB exp RRB stmt . elseiflist
    (43) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (45) elseiflist -> . ELSEIF LRB exp RRB stmt
    (46) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (47) elseiflist -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 151
    RCB             reduce using rule 47 (elseiflist -> .)
    RETURN          reduce using rule 47 (elseiflist -> .)
    WHILE           reduce using rule 47 (elseiflist -> .)
    ON              reduce using rule 47 (elseiflist -> .)
    FOR             reduce using rule 47 (elseiflist -> .)
    IF              reduce using rule 47 (elseiflist -> .)
    PRINT           reduce using rule 47 (elseiflist -> .)
    ID              reduce using rule 47 (elseiflist -> .)
    LRB             reduce using rule 47 (elseiflist -> .)
    SUB             reduce using rule 47 (elseiflist -> .)
    NOT             reduce using rule 47 (elseiflist -> .)
    LCB             reduce using rule 47 (elseiflist -> .)
    INTEGERNUMBER   reduce using rule 47 (elseiflist -> .)
    FLOATNUMBER     reduce using rule 47 (elseiflist -> .)
    TRUE            reduce using rule 47 (elseiflist -> .)
    FALSE           reduce using rule 47 (elseiflist -> .)
    ELSE            reduce using rule 47 (elseiflist -> .)
    WHERE           reduce using rule 47 (elseiflist -> .)

  ! ELSEIF          [ reduce using rule 47 (elseiflist -> .) ]

    elseiflist                     shift and go to state 150

state 143

    (44) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 144

    (38) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (32) cases -> cases . case
    (30) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 152
    WHERE           shift and go to state 147

    case                           shift and go to state 153

state 145

    (39) stmt -> ON LRB exp RRB LCB RCB . SEMICOLON

    SEMICOLON       shift and go to state 154


state 146

    (31) cases -> case .

    RCB             reduce using rule 31 (cases -> case .)
    WHERE           reduce using rule 31 (cases -> case .)


state 147

    (30) case -> WHERE . const COLON stmtlist
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    const                          shift and go to state 155

state 148

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 156
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 149

    (41) stmt -> FOR LRB ID IN ID RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    stmt                           shift and go to state 157
    exp                            shift and go to state 78
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 150

    (42) stmt -> IF LRB exp RRB stmt elseiflist .
    (43) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (46) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    RCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 158
    ELSEIF          shift and go to state 159

  ! ELSEIF          [ reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSE            [ reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 151

    (45) elseiflist -> ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 160


state 152

    (38) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 161


state 153

    (32) cases -> cases case .

    RCB             reduce using rule 32 (cases -> cases case .)
    WHERE           reduce using rule 32 (cases -> cases case .)


state 154

    (39) stmt -> ON LRB exp RRB LCB RCB SEMICOLON .

    RCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    RETURN          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHILE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ON              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    IF              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ID              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LRB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    SUB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    NOT             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    TRUE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FALSE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSEIF          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHERE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)


state 155

    (30) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 162


state 156

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 163
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 157

    (41) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 158

    (43) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 164
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 159

    (46) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 165


state 160

    (45) elseiflist -> ELSEIF LRB . exp RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 166
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 161

    (38) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 162

    (30) case -> WHERE const COLON . stmtlist
    (26) stmtlist -> . stmt
    (27) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    const                          shift and go to state 33
    stmtlist                       shift and go to state 167
    stmt                           shift and go to state 76
    exp                            shift and go to state 78
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 163

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 168
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (43) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 165

    (46) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 169
    assign                         shift and go to state 31
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 166

    (45) elseiflist -> ELSEIF LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 170
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 167

    (30) case -> WHERE const COLON stmtlist .
    (27) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    const                          shift and go to state 33
    stmt                           shift and go to state 101
    exp                            shift and go to state 78
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 168

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 169

    (46) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (72) relop -> . GT
    (73) relop -> . LT
    (74) relop -> . NE
    (75) relop -> . EQ
    (76) relop -> . LE
    (77) relop -> . GE

    RRB             shift and go to state 171
    AND             shift and go to state 56
    OR              shift and go to state 57
    SUM             shift and go to state 58
    SUB             shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    GT              shift and go to state 63
    LT              shift and go to state 64
    NE              shift and go to state 65
    EQ              shift and go to state 66
    LE              shift and go to state 67
    GE              shift and go to state 68

    operator                       shift and go to state 54
    relop                          shift and go to state 55

state 170

    (45) elseiflist -> ELSEIF LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 172
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 171

    (46) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . assign
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (60) assign -> . lvalue ASSIGN exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 77
    WHILE           shift and go to state 81
    ON              shift and go to state 82
    FOR             shift and go to state 83
    IF              shift and go to state 85
    PRINT           shift and go to state 86
    ID              shift and go to state 84
    LRB             shift and go to state 35
    SUB             shift and go to state 36
    NOT             shift and go to state 37
    LCB             shift and go to state 45
    INTEGERNUMBER   shift and go to state 38
    FLOATNUMBER     shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    exp                            shift and go to state 78
    stmt                           shift and go to state 173
    block                          shift and go to state 79
    vardec                         shift and go to state 80
    assign                         shift and go to state 87
    relopexp                       shift and go to state 32
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 172

    (45) elseiflist -> ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)


state 173

    (46) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for SUM in state 97 resolved as shift
WARNING: shift/reduce conflict for SUB in state 97 resolved as shift
WARNING: shift/reduce conflict for MUL in state 97 resolved as shift
WARNING: shift/reduce conflict for DIV in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for NE in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for SUM in state 98 resolved as shift
WARNING: shift/reduce conflict for SUB in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 142 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 150 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 150 resolved as shift

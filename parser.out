Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> dec
Rule 3     declist -> declist dec
Rule 4     declist -> empty
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> ID ASSIGN exp
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> idlist COLON type SEMICOLON
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 17    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 18    paramdecs -> paramdecslist
Rule 19    paramdecs -> empty
Rule 20    paramdecslist -> paramdec
Rule 21    paramdecslist -> paramdecslist COMMA paramdec
Rule 22    paramdec -> ID COLON type
Rule 23    paramdec -> ID LSB RSB COLON type
Rule 24    block -> LCB stmtlist RCB
Rule 25    stmtlist -> stmt
Rule 26    stmtlist -> stmtlist stmt
Rule 27    stmtlist -> empty
Rule 28    lvalue -> ID
Rule 29    lvalue -> ID LSB exp RSB
Rule 30    case -> WHERE const COLON stmtlist
Rule 31    cases -> case
Rule 32    cases -> cases case
Rule 33    cases -> empty
Rule 34    stmt -> RETURN exp SEMICOLON
Rule 35    stmt -> exp SEMICOLON
Rule 36    stmt -> block
Rule 37    stmt -> vardec
Rule 38    stmt -> WHILE LRB exp RRB stmt
Rule 39    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 40    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 41    stmt -> FOR LRB ID IN ID RRB stmt
Rule 42    stmt -> IF LRB exp RRB stmt elseiflist
Rule 43    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 44    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 45    elseiflist -> ELSEIF LRB exp RRB stmt
Rule 46    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 47    elseiflist -> empty
Rule 48    relopexp -> exp relop exp
Rule 49    relopexp -> relopexp relop exp
Rule 50    exp -> lvalue ASSIGN exp
Rule 51    exp -> exp operator exp
Rule 52    exp -> relopexp
Rule 53    exp -> const
Rule 54    exp -> lvalue
Rule 55    exp -> ID LRB explist RRB
Rule 56    exp -> LRB exp RRB
Rule 57    exp -> ID LRB RRB
Rule 58    exp -> SUB exp
Rule 59    exp -> NOT exp
Rule 60    operator -> AND
Rule 61    operator -> OR
Rule 62    operator -> SUM
Rule 63    operator -> SUB
Rule 64    operator -> MUL
Rule 65    operator -> DIV
Rule 66    operator -> MOD
Rule 67    const -> INTEGERNUMBER
Rule 68    const -> FLOATNUMBER
Rule 69    const -> TRUE
Rule 70    const -> FALSE
Rule 71    relop -> GT
Rule 72    relop -> LT
Rule 73    relop -> NE
Rule 74    relop -> EQ
Rule 75    relop -> LE
Rule 76    relop -> GE
Rule 77    explist -> exp
Rule 78    explist -> explist COMMA exp
Rule 79    empty -> <empty>

Terminals, with rules where they appear

AND                  : 60
ASSIGN               : 12 50
BOOLEAN              : 9
COLON                : 15 16 22 23 30
COMMA                : 14 21 78
DIV                  : 65
ELSE                 : 43
ELSEIF               : 45 46
EQ                   : 74
ERROR                : 
FALSE                : 70
FLOAT                : 8
FLOATNUMBER          : 68
FOR                  : 40 41
FUNCTION             : 16 17
GE                   : 76
GT                   : 71
ID                   : 10 11 12 16 17 22 23 28 29 41 41 44 55 57
IF                   : 42 43
IN                   : 41
INTEGER              : 7
INTEGERNUMBER        : 67
LCB                  : 24 39
LE                   : 75
LRB                  : 1 16 17 38 39 40 41 42 43 44 45 46 55 56 57
LSB                  : 11 23 29
LT                   : 72
MAIN                 : 1
MOD                  : 66
MUL                  : 64
NE                   : 73
NOT                  : 59
ON                   : 39
OR                   : 61
PRINT                : 44
RCB                  : 24 39
RETURN               : 34
RRB                  : 1 16 17 38 39 40 41 42 43 44 45 46 55 56 57
RSB                  : 11 23 29
SEMICOLON            : 15 34 35 39 40 40 44
SUB                  : 58 63
SUM                  : 62
TRUE                 : 69
WHERE                : 30
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

block                : 1 16 17 36
case                 : 31 32
cases                : 32 39
const                : 30 53
dec                  : 2 3
declist              : 1 3
elseiflist           : 42 43 46
empty                : 4 19 27 33 47
exp                  : 11 12 29 34 35 38 39 40 40 40 42 43 45 46 48 48 49 50 51 51 56 58 59 77 78
explist              : 55 78
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
lvalue               : 50 54
operator             : 51
paramdec             : 20 21
paramdecs            : 16 17
paramdecslist        : 18 21
program              : 0
relop                : 48 49
relopexp             : 49 52
stmt                 : 25 26 38 40 41 42 43 43 45 46
stmtlist             : 24 26 30
type                 : 15 16 22 23
vardec               : 5 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . dec
    (3) declist -> . declist dec
    (4) declist -> . empty
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (79) empty -> .
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    MAIN            reduce using rule 79 (empty -> .)
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

  ! FUNCTION        [ reduce using rule 79 (empty -> .) ]
  ! ID              [ reduce using rule 79 (empty -> .) ]

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 3
    empty                          shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (3) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 11
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 12
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (2) declist -> dec .

    MAIN            reduce using rule 2 (declist -> dec .)
    FUNCTION        reduce using rule 2 (declist -> dec .)
    ID              reduce using rule 2 (declist -> dec .)


state 4

    (4) declist -> empty .

    MAIN            reduce using rule 4 (declist -> empty .)
    FUNCTION        reduce using rule 4 (declist -> empty .)
    ID              reduce using rule 4 (declist -> empty .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 13
    COMMA           shift and go to state 14


state 8

    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 15


state 9

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 16
    ASSIGN          shift and go to state 17


state 10

    (13) idlist -> iddec .

    COLON           reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 18


state 12

    (3) declist -> declist dec .

    MAIN            reduce using rule 3 (declist -> declist dec .)
    FUNCTION        reduce using rule 3 (declist -> declist dec .)
    ID              reduce using rule 3 (declist -> declist dec .)


state 13

    (15) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    BOOLEAN         shift and go to state 22

    type                           shift and go to state 19

state 14

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 9

    iddec                          shift and go to state 23

state 15

    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 24


state 16

    (11) iddec -> ID LSB . exp RSB
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 26
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 17

    (12) iddec -> ID ASSIGN . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 37
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 18

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 38


state 19

    (15) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 39


state 20

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 21

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 22

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 23

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 24

    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (18) paramdecs -> . paramdecslist
    (19) paramdecs -> . empty
    (20) paramdecslist -> . paramdec
    (21) paramdecslist -> . paramdecslist COMMA paramdec
    (79) empty -> .
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 79 (empty -> .)
    ID              shift and go to state 40

    paramdecs                      shift and go to state 41
    paramdecslist                  shift and go to state 42
    empty                          shift and go to state 43
    paramdec                       shift and go to state 44

state 25

    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 45
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    RSB             reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    COLON           reduce using rule 28 (lvalue -> ID .)
    COMMA           reduce using rule 28 (lvalue -> ID .)
    RRB             reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 46


state 26

    (11) iddec -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RSB             shift and go to state 47
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 27

    (50) exp -> lvalue . ASSIGN exp
    (54) exp -> lvalue .

    ASSIGN          shift and go to state 63
    RSB             reduce using rule 54 (exp -> lvalue .)
    AND             reduce using rule 54 (exp -> lvalue .)
    OR              reduce using rule 54 (exp -> lvalue .)
    SUM             reduce using rule 54 (exp -> lvalue .)
    SUB             reduce using rule 54 (exp -> lvalue .)
    MUL             reduce using rule 54 (exp -> lvalue .)
    DIV             reduce using rule 54 (exp -> lvalue .)
    MOD             reduce using rule 54 (exp -> lvalue .)
    GT              reduce using rule 54 (exp -> lvalue .)
    LT              reduce using rule 54 (exp -> lvalue .)
    NE              reduce using rule 54 (exp -> lvalue .)
    EQ              reduce using rule 54 (exp -> lvalue .)
    LE              reduce using rule 54 (exp -> lvalue .)
    GE              reduce using rule 54 (exp -> lvalue .)
    COLON           reduce using rule 54 (exp -> lvalue .)
    COMMA           reduce using rule 54 (exp -> lvalue .)
    RRB             reduce using rule 54 (exp -> lvalue .)
    SEMICOLON       reduce using rule 54 (exp -> lvalue .)


state 28

    (52) exp -> relopexp .
    (49) relopexp -> relopexp . relop exp
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 52 (exp -> relopexp .)
    AND             reduce using rule 52 (exp -> relopexp .)
    OR              reduce using rule 52 (exp -> relopexp .)
    SUM             reduce using rule 52 (exp -> relopexp .)
    SUB             reduce using rule 52 (exp -> relopexp .)
    MUL             reduce using rule 52 (exp -> relopexp .)
    DIV             reduce using rule 52 (exp -> relopexp .)
    MOD             reduce using rule 52 (exp -> relopexp .)
    COLON           reduce using rule 52 (exp -> relopexp .)
    COMMA           reduce using rule 52 (exp -> relopexp .)
    RRB             reduce using rule 52 (exp -> relopexp .)
    SEMICOLON       reduce using rule 52 (exp -> relopexp .)
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! GT              [ reduce using rule 52 (exp -> relopexp .) ]
  ! LT              [ reduce using rule 52 (exp -> relopexp .) ]
  ! NE              [ reduce using rule 52 (exp -> relopexp .) ]
  ! EQ              [ reduce using rule 52 (exp -> relopexp .) ]
  ! LE              [ reduce using rule 52 (exp -> relopexp .) ]
  ! GE              [ reduce using rule 52 (exp -> relopexp .) ]

    relop                          shift and go to state 64

state 29

    (53) exp -> const .

    RSB             reduce using rule 53 (exp -> const .)
    AND             reduce using rule 53 (exp -> const .)
    OR              reduce using rule 53 (exp -> const .)
    SUM             reduce using rule 53 (exp -> const .)
    SUB             reduce using rule 53 (exp -> const .)
    MUL             reduce using rule 53 (exp -> const .)
    DIV             reduce using rule 53 (exp -> const .)
    MOD             reduce using rule 53 (exp -> const .)
    GT              reduce using rule 53 (exp -> const .)
    LT              reduce using rule 53 (exp -> const .)
    NE              reduce using rule 53 (exp -> const .)
    EQ              reduce using rule 53 (exp -> const .)
    LE              reduce using rule 53 (exp -> const .)
    GE              reduce using rule 53 (exp -> const .)
    COLON           reduce using rule 53 (exp -> const .)
    COMMA           reduce using rule 53 (exp -> const .)
    RRB             reduce using rule 53 (exp -> const .)
    SEMICOLON       reduce using rule 53 (exp -> const .)


state 30

    (56) exp -> LRB . exp RRB
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 65
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 31

    (58) exp -> SUB . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 66
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 32

    (59) exp -> NOT . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 67
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 33

    (67) const -> INTEGERNUMBER .

    RSB             reduce using rule 67 (const -> INTEGERNUMBER .)
    AND             reduce using rule 67 (const -> INTEGERNUMBER .)
    OR              reduce using rule 67 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 67 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 67 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 67 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 67 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 67 (const -> INTEGERNUMBER .)
    GT              reduce using rule 67 (const -> INTEGERNUMBER .)
    LT              reduce using rule 67 (const -> INTEGERNUMBER .)
    NE              reduce using rule 67 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 67 (const -> INTEGERNUMBER .)
    LE              reduce using rule 67 (const -> INTEGERNUMBER .)
    GE              reduce using rule 67 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 67 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 67 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 67 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 67 (const -> INTEGERNUMBER .)


state 34

    (68) const -> FLOATNUMBER .

    RSB             reduce using rule 68 (const -> FLOATNUMBER .)
    AND             reduce using rule 68 (const -> FLOATNUMBER .)
    OR              reduce using rule 68 (const -> FLOATNUMBER .)
    SUM             reduce using rule 68 (const -> FLOATNUMBER .)
    SUB             reduce using rule 68 (const -> FLOATNUMBER .)
    MUL             reduce using rule 68 (const -> FLOATNUMBER .)
    DIV             reduce using rule 68 (const -> FLOATNUMBER .)
    MOD             reduce using rule 68 (const -> FLOATNUMBER .)
    GT              reduce using rule 68 (const -> FLOATNUMBER .)
    LT              reduce using rule 68 (const -> FLOATNUMBER .)
    NE              reduce using rule 68 (const -> FLOATNUMBER .)
    EQ              reduce using rule 68 (const -> FLOATNUMBER .)
    LE              reduce using rule 68 (const -> FLOATNUMBER .)
    GE              reduce using rule 68 (const -> FLOATNUMBER .)
    COLON           reduce using rule 68 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 68 (const -> FLOATNUMBER .)
    RRB             reduce using rule 68 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 68 (const -> FLOATNUMBER .)


state 35

    (69) const -> TRUE .

    RSB             reduce using rule 69 (const -> TRUE .)
    AND             reduce using rule 69 (const -> TRUE .)
    OR              reduce using rule 69 (const -> TRUE .)
    SUM             reduce using rule 69 (const -> TRUE .)
    SUB             reduce using rule 69 (const -> TRUE .)
    MUL             reduce using rule 69 (const -> TRUE .)
    DIV             reduce using rule 69 (const -> TRUE .)
    MOD             reduce using rule 69 (const -> TRUE .)
    GT              reduce using rule 69 (const -> TRUE .)
    LT              reduce using rule 69 (const -> TRUE .)
    NE              reduce using rule 69 (const -> TRUE .)
    EQ              reduce using rule 69 (const -> TRUE .)
    LE              reduce using rule 69 (const -> TRUE .)
    GE              reduce using rule 69 (const -> TRUE .)
    COLON           reduce using rule 69 (const -> TRUE .)
    COMMA           reduce using rule 69 (const -> TRUE .)
    RRB             reduce using rule 69 (const -> TRUE .)
    SEMICOLON       reduce using rule 69 (const -> TRUE .)


state 36

    (70) const -> FALSE .

    RSB             reduce using rule 70 (const -> FALSE .)
    AND             reduce using rule 70 (const -> FALSE .)
    OR              reduce using rule 70 (const -> FALSE .)
    SUM             reduce using rule 70 (const -> FALSE .)
    SUB             reduce using rule 70 (const -> FALSE .)
    MUL             reduce using rule 70 (const -> FALSE .)
    DIV             reduce using rule 70 (const -> FALSE .)
    MOD             reduce using rule 70 (const -> FALSE .)
    GT              reduce using rule 70 (const -> FALSE .)
    LT              reduce using rule 70 (const -> FALSE .)
    NE              reduce using rule 70 (const -> FALSE .)
    EQ              reduce using rule 70 (const -> FALSE .)
    LE              reduce using rule 70 (const -> FALSE .)
    GE              reduce using rule 70 (const -> FALSE .)
    COLON           reduce using rule 70 (const -> FALSE .)
    COMMA           reduce using rule 70 (const -> FALSE .)
    RRB             reduce using rule 70 (const -> FALSE .)
    SEMICOLON       reduce using rule 70 (const -> FALSE .)


state 37

    (12) iddec -> ID ASSIGN exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    COLON           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 38

    (1) program -> declist MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB

    LCB             shift and go to state 69

    block                          shift and go to state 68

state 39

    (15) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)


state 40

    (22) paramdec -> ID . COLON type
    (23) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 70
    LSB             shift and go to state 71


state 41

    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 72


state 42

    (18) paramdecs -> paramdecslist .
    (21) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 18 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 73


state 43

    (19) paramdecs -> empty .

    RRB             reduce using rule 19 (paramdecs -> empty .)


state 44

    (20) paramdecslist -> paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdec .)


state 45

    (55) exp -> ID LRB . explist RRB
    (57) exp -> ID LRB . RRB
    (77) explist -> . exp
    (78) explist -> . explist COMMA exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    RRB             shift and go to state 75
    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    explist                        shift and go to state 74
    exp                            shift and go to state 76
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 46

    (29) lvalue -> ID LSB . exp RSB
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 77
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 47

    (11) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 48

    (51) exp -> exp operator . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 78
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 49

    (48) relopexp -> exp relop . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 79
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 50

    (60) operator -> AND .

    ID              reduce using rule 60 (operator -> AND .)
    LRB             reduce using rule 60 (operator -> AND .)
    SUB             reduce using rule 60 (operator -> AND .)
    NOT             reduce using rule 60 (operator -> AND .)
    INTEGERNUMBER   reduce using rule 60 (operator -> AND .)
    FLOATNUMBER     reduce using rule 60 (operator -> AND .)
    TRUE            reduce using rule 60 (operator -> AND .)
    FALSE           reduce using rule 60 (operator -> AND .)


state 51

    (61) operator -> OR .

    ID              reduce using rule 61 (operator -> OR .)
    LRB             reduce using rule 61 (operator -> OR .)
    SUB             reduce using rule 61 (operator -> OR .)
    NOT             reduce using rule 61 (operator -> OR .)
    INTEGERNUMBER   reduce using rule 61 (operator -> OR .)
    FLOATNUMBER     reduce using rule 61 (operator -> OR .)
    TRUE            reduce using rule 61 (operator -> OR .)
    FALSE           reduce using rule 61 (operator -> OR .)


state 52

    (62) operator -> SUM .

    ID              reduce using rule 62 (operator -> SUM .)
    LRB             reduce using rule 62 (operator -> SUM .)
    SUB             reduce using rule 62 (operator -> SUM .)
    NOT             reduce using rule 62 (operator -> SUM .)
    INTEGERNUMBER   reduce using rule 62 (operator -> SUM .)
    FLOATNUMBER     reduce using rule 62 (operator -> SUM .)
    TRUE            reduce using rule 62 (operator -> SUM .)
    FALSE           reduce using rule 62 (operator -> SUM .)


state 53

    (63) operator -> SUB .

    ID              reduce using rule 63 (operator -> SUB .)
    LRB             reduce using rule 63 (operator -> SUB .)
    SUB             reduce using rule 63 (operator -> SUB .)
    NOT             reduce using rule 63 (operator -> SUB .)
    INTEGERNUMBER   reduce using rule 63 (operator -> SUB .)
    FLOATNUMBER     reduce using rule 63 (operator -> SUB .)
    TRUE            reduce using rule 63 (operator -> SUB .)
    FALSE           reduce using rule 63 (operator -> SUB .)


state 54

    (64) operator -> MUL .

    ID              reduce using rule 64 (operator -> MUL .)
    LRB             reduce using rule 64 (operator -> MUL .)
    SUB             reduce using rule 64 (operator -> MUL .)
    NOT             reduce using rule 64 (operator -> MUL .)
    INTEGERNUMBER   reduce using rule 64 (operator -> MUL .)
    FLOATNUMBER     reduce using rule 64 (operator -> MUL .)
    TRUE            reduce using rule 64 (operator -> MUL .)
    FALSE           reduce using rule 64 (operator -> MUL .)


state 55

    (65) operator -> DIV .

    ID              reduce using rule 65 (operator -> DIV .)
    LRB             reduce using rule 65 (operator -> DIV .)
    SUB             reduce using rule 65 (operator -> DIV .)
    NOT             reduce using rule 65 (operator -> DIV .)
    INTEGERNUMBER   reduce using rule 65 (operator -> DIV .)
    FLOATNUMBER     reduce using rule 65 (operator -> DIV .)
    TRUE            reduce using rule 65 (operator -> DIV .)
    FALSE           reduce using rule 65 (operator -> DIV .)


state 56

    (66) operator -> MOD .

    ID              reduce using rule 66 (operator -> MOD .)
    LRB             reduce using rule 66 (operator -> MOD .)
    SUB             reduce using rule 66 (operator -> MOD .)
    NOT             reduce using rule 66 (operator -> MOD .)
    INTEGERNUMBER   reduce using rule 66 (operator -> MOD .)
    FLOATNUMBER     reduce using rule 66 (operator -> MOD .)
    TRUE            reduce using rule 66 (operator -> MOD .)
    FALSE           reduce using rule 66 (operator -> MOD .)


state 57

    (71) relop -> GT .

    ID              reduce using rule 71 (relop -> GT .)
    LRB             reduce using rule 71 (relop -> GT .)
    SUB             reduce using rule 71 (relop -> GT .)
    NOT             reduce using rule 71 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 71 (relop -> GT .)
    FLOATNUMBER     reduce using rule 71 (relop -> GT .)
    TRUE            reduce using rule 71 (relop -> GT .)
    FALSE           reduce using rule 71 (relop -> GT .)


state 58

    (72) relop -> LT .

    ID              reduce using rule 72 (relop -> LT .)
    LRB             reduce using rule 72 (relop -> LT .)
    SUB             reduce using rule 72 (relop -> LT .)
    NOT             reduce using rule 72 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 72 (relop -> LT .)
    FLOATNUMBER     reduce using rule 72 (relop -> LT .)
    TRUE            reduce using rule 72 (relop -> LT .)
    FALSE           reduce using rule 72 (relop -> LT .)


state 59

    (73) relop -> NE .

    ID              reduce using rule 73 (relop -> NE .)
    LRB             reduce using rule 73 (relop -> NE .)
    SUB             reduce using rule 73 (relop -> NE .)
    NOT             reduce using rule 73 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 73 (relop -> NE .)
    FLOATNUMBER     reduce using rule 73 (relop -> NE .)
    TRUE            reduce using rule 73 (relop -> NE .)
    FALSE           reduce using rule 73 (relop -> NE .)


state 60

    (74) relop -> EQ .

    ID              reduce using rule 74 (relop -> EQ .)
    LRB             reduce using rule 74 (relop -> EQ .)
    SUB             reduce using rule 74 (relop -> EQ .)
    NOT             reduce using rule 74 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 74 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 74 (relop -> EQ .)
    TRUE            reduce using rule 74 (relop -> EQ .)
    FALSE           reduce using rule 74 (relop -> EQ .)


state 61

    (75) relop -> LE .

    ID              reduce using rule 75 (relop -> LE .)
    LRB             reduce using rule 75 (relop -> LE .)
    SUB             reduce using rule 75 (relop -> LE .)
    NOT             reduce using rule 75 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 75 (relop -> LE .)
    FLOATNUMBER     reduce using rule 75 (relop -> LE .)
    TRUE            reduce using rule 75 (relop -> LE .)
    FALSE           reduce using rule 75 (relop -> LE .)


state 62

    (76) relop -> GE .

    ID              reduce using rule 76 (relop -> GE .)
    LRB             reduce using rule 76 (relop -> GE .)
    SUB             reduce using rule 76 (relop -> GE .)
    NOT             reduce using rule 76 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 76 (relop -> GE .)
    FLOATNUMBER     reduce using rule 76 (relop -> GE .)
    TRUE            reduce using rule 76 (relop -> GE .)
    FALSE           reduce using rule 76 (relop -> GE .)


state 63

    (50) exp -> lvalue ASSIGN . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    lvalue                         shift and go to state 27
    exp                            shift and go to state 80
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 64

    (49) relopexp -> relopexp relop . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    relopexp                       shift and go to state 28
    exp                            shift and go to state 81
    lvalue                         shift and go to state 27
    const                          shift and go to state 29

state 65

    (56) exp -> LRB exp . RRB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 82
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 66

    (58) exp -> SUB exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RSB             reduce using rule 58 (exp -> SUB exp .)
    AND             reduce using rule 58 (exp -> SUB exp .)
    OR              reduce using rule 58 (exp -> SUB exp .)
    SUM             reduce using rule 58 (exp -> SUB exp .)
    SUB             reduce using rule 58 (exp -> SUB exp .)
    GT              reduce using rule 58 (exp -> SUB exp .)
    LT              reduce using rule 58 (exp -> SUB exp .)
    NE              reduce using rule 58 (exp -> SUB exp .)
    EQ              reduce using rule 58 (exp -> SUB exp .)
    LE              reduce using rule 58 (exp -> SUB exp .)
    GE              reduce using rule 58 (exp -> SUB exp .)
    COLON           reduce using rule 58 (exp -> SUB exp .)
    COMMA           reduce using rule 58 (exp -> SUB exp .)
    RRB             reduce using rule 58 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 58 (exp -> SUB exp .)
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56

  ! MUL             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! SUM             [ shift and go to state 52 ]
  ! SUB             [ shift and go to state 53 ]
  ! GT              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! NE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! LE              [ shift and go to state 61 ]
  ! GE              [ shift and go to state 62 ]

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 67

    (59) exp -> NOT exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 59 (exp -> NOT exp .)
    COLON           reduce using rule 59 (exp -> NOT exp .)
    COMMA           reduce using rule 59 (exp -> NOT exp .)
    RRB             reduce using rule 59 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 59 (exp -> NOT exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! AND             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 59 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 59 (exp -> NOT exp .) ]

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 68

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 69

    (24) block -> LCB . stmtlist RCB
    (25) stmtlist -> . stmt
    (26) stmtlist -> . stmtlist stmt
    (27) stmtlist -> . empty
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (79) empty -> .
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ON resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LRB resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LCB resolved as shift
  ! shift/reduce conflict for INTEGERNUMBER resolved as shift
  ! shift/reduce conflict for FLOATNUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    RCB             reduce using rule 79 (empty -> .)
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! RETURN          [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! ON              [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! PRINT           [ reduce using rule 79 (empty -> .) ]
  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! LRB             [ reduce using rule 79 (empty -> .) ]
  ! SUB             [ reduce using rule 79 (empty -> .) ]
  ! NOT             [ reduce using rule 79 (empty -> .) ]
  ! LCB             [ reduce using rule 79 (empty -> .) ]
  ! INTEGERNUMBER   [ reduce using rule 79 (empty -> .) ]
  ! FLOATNUMBER     [ reduce using rule 79 (empty -> .) ]
  ! TRUE            [ reduce using rule 79 (empty -> .) ]
  ! FALSE           [ reduce using rule 79 (empty -> .) ]

    stmtlist                       shift and go to state 83
    stmt                           shift and go to state 84
    empty                          shift and go to state 85
    exp                            shift and go to state 87
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 70

    (22) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    BOOLEAN         shift and go to state 22

    type                           shift and go to state 96

state 71

    (23) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 97


state 72

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (24) block -> . LCB stmtlist RCB

    COLON           shift and go to state 98
    LCB             shift and go to state 69

    block                          shift and go to state 99

state 73

    (21) paramdecslist -> paramdecslist COMMA . paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 40

    paramdec                       shift and go to state 100

state 74

    (55) exp -> ID LRB explist . RRB
    (78) explist -> explist . COMMA exp

    RRB             shift and go to state 101
    COMMA           shift and go to state 102


state 75

    (57) exp -> ID LRB RRB .

    RSB             reduce using rule 57 (exp -> ID LRB RRB .)
    AND             reduce using rule 57 (exp -> ID LRB RRB .)
    OR              reduce using rule 57 (exp -> ID LRB RRB .)
    SUM             reduce using rule 57 (exp -> ID LRB RRB .)
    SUB             reduce using rule 57 (exp -> ID LRB RRB .)
    MUL             reduce using rule 57 (exp -> ID LRB RRB .)
    DIV             reduce using rule 57 (exp -> ID LRB RRB .)
    MOD             reduce using rule 57 (exp -> ID LRB RRB .)
    GT              reduce using rule 57 (exp -> ID LRB RRB .)
    LT              reduce using rule 57 (exp -> ID LRB RRB .)
    NE              reduce using rule 57 (exp -> ID LRB RRB .)
    EQ              reduce using rule 57 (exp -> ID LRB RRB .)
    LE              reduce using rule 57 (exp -> ID LRB RRB .)
    GE              reduce using rule 57 (exp -> ID LRB RRB .)
    COLON           reduce using rule 57 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 57 (exp -> ID LRB RRB .)
    RRB             reduce using rule 57 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 57 (exp -> ID LRB RRB .)


state 76

    (77) explist -> exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             reduce using rule 77 (explist -> exp .)
    COMMA           reduce using rule 77 (explist -> exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 77

    (29) lvalue -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RSB             shift and go to state 103
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 78

    (51) exp -> exp operator exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 51 (exp -> exp operator exp .)
    COLON           reduce using rule 51 (exp -> exp operator exp .)
    COMMA           reduce using rule 51 (exp -> exp operator exp .)
    RRB             reduce using rule 51 (exp -> exp operator exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp operator exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! AND             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! OR              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! SUM             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 51 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 51 (exp -> exp operator exp .) ]

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 79

    (48) relopexp -> exp relop exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 48 (relopexp -> exp relop exp .)
    COLON           reduce using rule 48 (relopexp -> exp relop exp .)
    COMMA           reduce using rule 48 (relopexp -> exp relop exp .)
    RRB             reduce using rule 48 (relopexp -> exp relop exp .)
    SEMICOLON       reduce using rule 48 (relopexp -> exp relop exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! GT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! NE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! GE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! AND             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! OR              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 48 (relopexp -> exp relop exp .) ]

    relop                          shift and go to state 49
    operator                       shift and go to state 48

state 80

    (50) exp -> lvalue ASSIGN exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RSB             reduce using rule 50 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 50 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 50 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 50 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 50 (exp -> lvalue ASSIGN exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! AND             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! GT              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 50 (exp -> lvalue ASSIGN exp .) ]

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 81

    (49) relopexp -> relopexp relop exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    COLON           reduce using rule 49 (relopexp -> relopexp relop exp .)
    COMMA           reduce using rule 49 (relopexp -> relopexp relop exp .)
    RRB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    SEMICOLON       reduce using rule 49 (relopexp -> relopexp relop exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

  ! GT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! NE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! EQ              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! GE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! AND             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! OR              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUM             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUB             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MUL             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! DIV             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MOD             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]

    relop                          shift and go to state 49
    operator                       shift and go to state 48

state 82

    (56) exp -> LRB exp RRB .

    RSB             reduce using rule 56 (exp -> LRB exp RRB .)
    AND             reduce using rule 56 (exp -> LRB exp RRB .)
    OR              reduce using rule 56 (exp -> LRB exp RRB .)
    SUM             reduce using rule 56 (exp -> LRB exp RRB .)
    SUB             reduce using rule 56 (exp -> LRB exp RRB .)
    MUL             reduce using rule 56 (exp -> LRB exp RRB .)
    DIV             reduce using rule 56 (exp -> LRB exp RRB .)
    MOD             reduce using rule 56 (exp -> LRB exp RRB .)
    GT              reduce using rule 56 (exp -> LRB exp RRB .)
    LT              reduce using rule 56 (exp -> LRB exp RRB .)
    NE              reduce using rule 56 (exp -> LRB exp RRB .)
    EQ              reduce using rule 56 (exp -> LRB exp RRB .)
    LE              reduce using rule 56 (exp -> LRB exp RRB .)
    GE              reduce using rule 56 (exp -> LRB exp RRB .)
    COLON           reduce using rule 56 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 56 (exp -> LRB exp RRB .)
    RRB             reduce using rule 56 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 56 (exp -> LRB exp RRB .)


state 83

    (24) block -> LCB stmtlist . RCB
    (26) stmtlist -> stmtlist . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 104
    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    stmt                           shift and go to state 105
    exp                            shift and go to state 87
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 84

    (25) stmtlist -> stmt .

    RCB             reduce using rule 25 (stmtlist -> stmt .)
    RETURN          reduce using rule 25 (stmtlist -> stmt .)
    WHILE           reduce using rule 25 (stmtlist -> stmt .)
    ON              reduce using rule 25 (stmtlist -> stmt .)
    FOR             reduce using rule 25 (stmtlist -> stmt .)
    IF              reduce using rule 25 (stmtlist -> stmt .)
    PRINT           reduce using rule 25 (stmtlist -> stmt .)
    ID              reduce using rule 25 (stmtlist -> stmt .)
    LRB             reduce using rule 25 (stmtlist -> stmt .)
    SUB             reduce using rule 25 (stmtlist -> stmt .)
    NOT             reduce using rule 25 (stmtlist -> stmt .)
    LCB             reduce using rule 25 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 25 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 25 (stmtlist -> stmt .)
    TRUE            reduce using rule 25 (stmtlist -> stmt .)
    FALSE           reduce using rule 25 (stmtlist -> stmt .)
    WHERE           reduce using rule 25 (stmtlist -> stmt .)


state 85

    (27) stmtlist -> empty .

    RCB             reduce using rule 27 (stmtlist -> empty .)
    RETURN          reduce using rule 27 (stmtlist -> empty .)
    WHILE           reduce using rule 27 (stmtlist -> empty .)
    ON              reduce using rule 27 (stmtlist -> empty .)
    FOR             reduce using rule 27 (stmtlist -> empty .)
    IF              reduce using rule 27 (stmtlist -> empty .)
    PRINT           reduce using rule 27 (stmtlist -> empty .)
    ID              reduce using rule 27 (stmtlist -> empty .)
    LRB             reduce using rule 27 (stmtlist -> empty .)
    SUB             reduce using rule 27 (stmtlist -> empty .)
    NOT             reduce using rule 27 (stmtlist -> empty .)
    LCB             reduce using rule 27 (stmtlist -> empty .)
    INTEGERNUMBER   reduce using rule 27 (stmtlist -> empty .)
    FLOATNUMBER     reduce using rule 27 (stmtlist -> empty .)
    TRUE            reduce using rule 27 (stmtlist -> empty .)
    FALSE           reduce using rule 27 (stmtlist -> empty .)
    WHERE           reduce using rule 27 (stmtlist -> empty .)


state 86

    (34) stmt -> RETURN . exp SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 106
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 87

    (35) stmt -> exp . SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    SEMICOLON       shift and go to state 107
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 88

    (36) stmt -> block .

    RCB             reduce using rule 36 (stmt -> block .)
    RETURN          reduce using rule 36 (stmt -> block .)
    WHILE           reduce using rule 36 (stmt -> block .)
    ON              reduce using rule 36 (stmt -> block .)
    FOR             reduce using rule 36 (stmt -> block .)
    IF              reduce using rule 36 (stmt -> block .)
    PRINT           reduce using rule 36 (stmt -> block .)
    ID              reduce using rule 36 (stmt -> block .)
    LRB             reduce using rule 36 (stmt -> block .)
    SUB             reduce using rule 36 (stmt -> block .)
    NOT             reduce using rule 36 (stmt -> block .)
    LCB             reduce using rule 36 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> block .)
    FLOATNUMBER     reduce using rule 36 (stmt -> block .)
    TRUE            reduce using rule 36 (stmt -> block .)
    FALSE           reduce using rule 36 (stmt -> block .)
    ELSEIF          reduce using rule 36 (stmt -> block .)
    ELSE            reduce using rule 36 (stmt -> block .)
    WHERE           reduce using rule 36 (stmt -> block .)


state 89

    (37) stmt -> vardec .

    RCB             reduce using rule 37 (stmt -> vardec .)
    RETURN          reduce using rule 37 (stmt -> vardec .)
    WHILE           reduce using rule 37 (stmt -> vardec .)
    ON              reduce using rule 37 (stmt -> vardec .)
    FOR             reduce using rule 37 (stmt -> vardec .)
    IF              reduce using rule 37 (stmt -> vardec .)
    PRINT           reduce using rule 37 (stmt -> vardec .)
    ID              reduce using rule 37 (stmt -> vardec .)
    LRB             reduce using rule 37 (stmt -> vardec .)
    SUB             reduce using rule 37 (stmt -> vardec .)
    NOT             reduce using rule 37 (stmt -> vardec .)
    LCB             reduce using rule 37 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 37 (stmt -> vardec .)
    TRUE            reduce using rule 37 (stmt -> vardec .)
    FALSE           reduce using rule 37 (stmt -> vardec .)
    ELSEIF          reduce using rule 37 (stmt -> vardec .)
    ELSE            reduce using rule 37 (stmt -> vardec .)
    WHERE           reduce using rule 37 (stmt -> vardec .)


state 90

    (38) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 108


state 91

    (39) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 109


state 92

    (40) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 110


state 93

    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

  ! shift/reduce conflict for ASSIGN resolved as shift
    LRB             shift and go to state 45
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 111
    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    ASSIGN          shift and go to state 17

  ! ASSIGN          [ reduce using rule 28 (lvalue -> ID .) ]


state 94

    (42) stmt -> IF . LRB exp RRB stmt elseiflist
    (43) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 112


state 95

    (44) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 113


state 96

    (22) paramdec -> ID COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID COLON type .)


state 97

    (23) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 114


state 98

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    BOOLEAN         shift and go to state 22

    type                           shift and go to state 115

state 99

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 100

    (21) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)


state 101

    (55) exp -> ID LRB explist RRB .

    RSB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 55 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 55 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 55 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 55 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 55 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 55 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 55 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 55 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 55 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 55 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 55 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 55 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 55 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 55 (exp -> ID LRB explist RRB .)


state 102

    (78) explist -> explist COMMA . exp
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 116
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 103

    (29) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 104

    (24) block -> LCB stmtlist RCB .

    $end            reduce using rule 24 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 24 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 24 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 24 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 24 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 24 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 24 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 24 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 24 (block -> LCB stmtlist RCB .)


state 105

    (26) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 26 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 26 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 26 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 26 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 26 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 26 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 26 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 26 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 26 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 26 (stmtlist -> stmtlist stmt .)


state 106

    (34) stmt -> RETURN exp . SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    SEMICOLON       shift and go to state 117
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 107

    (35) stmt -> exp SEMICOLON .

    RCB             reduce using rule 35 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 35 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 35 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 35 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 35 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 35 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 35 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 35 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 35 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 35 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 35 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 35 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 35 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 35 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 35 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 35 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 35 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 35 (stmt -> exp SEMICOLON .)


state 108

    (38) stmt -> WHILE LRB . exp RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 118
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 109

    (39) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 119
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 110

    (40) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR LRB . ID IN ID RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 121
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 120
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 111

    (29) lvalue -> ID LSB . exp RSB
    (11) iddec -> ID LSB . exp RSB
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 122
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 112

    (42) stmt -> IF LRB . exp RRB stmt elseiflist
    (43) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 123
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 113

    (44) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 124


state 114

    (23) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 21
    BOOLEAN         shift and go to state 22

    type                           shift and go to state 125

state 115

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (24) block -> . LCB stmtlist RCB

    LCB             shift and go to state 69

    block                          shift and go to state 126

state 116

    (78) explist -> explist COMMA exp .
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             reduce using rule 78 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 78 (explist -> explist COMMA exp .)
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 117

    (34) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 34 (stmt -> RETURN exp SEMICOLON .)


state 118

    (38) stmt -> WHILE LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 127
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 119

    (39) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 128
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 120

    (40) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    SEMICOLON       shift and go to state 129
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 121

    (41) stmt -> FOR LRB ID . IN ID RRB stmt
    (55) exp -> ID . LRB explist RRB
    (57) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 130
    LRB             shift and go to state 45
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    AND             reduce using rule 28 (lvalue -> ID .)
    OR              reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 46


state 122

    (29) lvalue -> ID LSB exp . RSB
    (11) iddec -> ID LSB exp . RSB
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RSB             shift and go to state 131
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 123

    (42) stmt -> IF LRB exp . RRB stmt elseiflist
    (43) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 132
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 124

    (44) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 133


state 125

    (23) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)


state 126

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 127

    (38) stmt -> WHILE LRB exp RRB . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 134
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 128

    (39) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 135


state 129

    (40) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 136
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 130

    (41) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 137


state 131

    (29) lvalue -> ID LSB exp RSB .
    (11) iddec -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 132

    (42) stmt -> IF LRB exp RRB . stmt elseiflist
    (43) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 138
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 133

    (44) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 139


state 134

    (38) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 38 (stmt -> WHILE LRB exp RRB stmt .)


state 135

    (39) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (31) cases -> . case
    (32) cases -> . cases case
    (33) cases -> . empty
    (30) case -> . WHERE const COLON stmtlist
    (79) empty -> .

  ! shift/reduce conflict for WHERE resolved as shift
    WHERE           shift and go to state 143
    RCB             reduce using rule 79 (empty -> .)

  ! WHERE           [ reduce using rule 79 (empty -> .) ]

    cases                          shift and go to state 140
    case                           shift and go to state 141
    empty                          shift and go to state 142

state 136

    (40) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    SEMICOLON       shift and go to state 144
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 137

    (41) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 145


state 138

    (42) stmt -> IF LRB exp RRB stmt . elseiflist
    (43) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (45) elseiflist -> . ELSEIF LRB exp RRB stmt
    (46) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (47) elseiflist -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 147
    RCB             reduce using rule 79 (empty -> .)
    RETURN          reduce using rule 79 (empty -> .)
    WHILE           reduce using rule 79 (empty -> .)
    ON              reduce using rule 79 (empty -> .)
    FOR             reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    PRINT           reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)
    LRB             reduce using rule 79 (empty -> .)
    SUB             reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    LCB             reduce using rule 79 (empty -> .)
    INTEGERNUMBER   reduce using rule 79 (empty -> .)
    FLOATNUMBER     reduce using rule 79 (empty -> .)
    TRUE            reduce using rule 79 (empty -> .)
    FALSE           reduce using rule 79 (empty -> .)
    ELSE            reduce using rule 79 (empty -> .)
    WHERE           reduce using rule 79 (empty -> .)

  ! ELSEIF          [ reduce using rule 79 (empty -> .) ]

    elseiflist                     shift and go to state 146
    empty                          shift and go to state 148

state 139

    (44) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 44 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 140

    (39) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (32) cases -> cases . case
    (30) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 149
    WHERE           shift and go to state 143

    case                           shift and go to state 150

state 141

    (31) cases -> case .

    RCB             reduce using rule 31 (cases -> case .)
    WHERE           reduce using rule 31 (cases -> case .)


state 142

    (33) cases -> empty .

    RCB             reduce using rule 33 (cases -> empty .)
    WHERE           reduce using rule 33 (cases -> empty .)


state 143

    (30) case -> WHERE . const COLON stmtlist
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    const                          shift and go to state 151

state 144

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 152
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 145

    (41) stmt -> FOR LRB ID IN ID RRB . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    stmt                           shift and go to state 153
    exp                            shift and go to state 87
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 146

    (42) stmt -> IF LRB exp RRB stmt elseiflist .
    (43) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (46) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSEIF          reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)

  ! ELSE            [ shift and go to state 154 ]
  ! ELSEIF          [ shift and go to state 155 ]


state 147

    (45) elseiflist -> ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 156


state 148

    (47) elseiflist -> empty .

    RCB             reduce using rule 47 (elseiflist -> empty .)
    RETURN          reduce using rule 47 (elseiflist -> empty .)
    WHILE           reduce using rule 47 (elseiflist -> empty .)
    ON              reduce using rule 47 (elseiflist -> empty .)
    FOR             reduce using rule 47 (elseiflist -> empty .)
    IF              reduce using rule 47 (elseiflist -> empty .)
    PRINT           reduce using rule 47 (elseiflist -> empty .)
    ID              reduce using rule 47 (elseiflist -> empty .)
    LRB             reduce using rule 47 (elseiflist -> empty .)
    SUB             reduce using rule 47 (elseiflist -> empty .)
    NOT             reduce using rule 47 (elseiflist -> empty .)
    LCB             reduce using rule 47 (elseiflist -> empty .)
    INTEGERNUMBER   reduce using rule 47 (elseiflist -> empty .)
    FLOATNUMBER     reduce using rule 47 (elseiflist -> empty .)
    TRUE            reduce using rule 47 (elseiflist -> empty .)
    FALSE           reduce using rule 47 (elseiflist -> empty .)
    ELSEIF          reduce using rule 47 (elseiflist -> empty .)
    ELSE            reduce using rule 47 (elseiflist -> empty .)
    WHERE           reduce using rule 47 (elseiflist -> empty .)


state 149

    (39) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 157


state 150

    (32) cases -> cases case .

    RCB             reduce using rule 32 (cases -> cases case .)
    WHERE           reduce using rule 32 (cases -> cases case .)


state 151

    (30) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 158


state 152

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 159
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 153

    (41) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 154

    (43) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 160
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 155

    (46) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 161


state 156

    (45) elseiflist -> ELSEIF LRB . exp RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 162
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 157

    (39) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 158

    (30) case -> WHERE const COLON . stmtlist
    (25) stmtlist -> . stmt
    (26) stmtlist -> . stmtlist stmt
    (27) stmtlist -> . empty
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (79) empty -> .
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ON resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LRB resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LCB resolved as shift
  ! shift/reduce conflict for INTEGERNUMBER resolved as shift
  ! shift/reduce conflict for FLOATNUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    RCB             reduce using rule 79 (empty -> .)
    WHERE           reduce using rule 79 (empty -> .)
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! RETURN          [ reduce using rule 79 (empty -> .) ]
  ! WHILE           [ reduce using rule 79 (empty -> .) ]
  ! ON              [ reduce using rule 79 (empty -> .) ]
  ! FOR             [ reduce using rule 79 (empty -> .) ]
  ! IF              [ reduce using rule 79 (empty -> .) ]
  ! PRINT           [ reduce using rule 79 (empty -> .) ]
  ! ID              [ reduce using rule 79 (empty -> .) ]
  ! LRB             [ reduce using rule 79 (empty -> .) ]
  ! SUB             [ reduce using rule 79 (empty -> .) ]
  ! NOT             [ reduce using rule 79 (empty -> .) ]
  ! LCB             [ reduce using rule 79 (empty -> .) ]
  ! INTEGERNUMBER   [ reduce using rule 79 (empty -> .) ]
  ! FLOATNUMBER     [ reduce using rule 79 (empty -> .) ]
  ! TRUE            [ reduce using rule 79 (empty -> .) ]
  ! FALSE           [ reduce using rule 79 (empty -> .) ]

    const                          shift and go to state 29
    stmtlist                       shift and go to state 163
    stmt                           shift and go to state 84
    empty                          shift and go to state 85
    exp                            shift and go to state 87
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 159

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 164
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 160

    (43) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 161

    (46) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 25
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 165
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29

state 162

    (45) elseiflist -> ELSEIF LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 166
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 163

    (30) case -> WHERE const COLON stmtlist .
    (26) stmtlist -> stmtlist . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    const                          shift and go to state 29
    stmt                           shift and go to state 105
    exp                            shift and go to state 87
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 165

    (46) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (51) exp -> exp . operator exp
    (48) relopexp -> exp . relop exp
    (60) operator -> . AND
    (61) operator -> . OR
    (62) operator -> . SUM
    (63) operator -> . SUB
    (64) operator -> . MUL
    (65) operator -> . DIV
    (66) operator -> . MOD
    (71) relop -> . GT
    (72) relop -> . LT
    (73) relop -> . NE
    (74) relop -> . EQ
    (75) relop -> . LE
    (76) relop -> . GE

    RRB             shift and go to state 167
    AND             shift and go to state 50
    OR              shift and go to state 51
    SUM             shift and go to state 52
    SUB             shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    MOD             shift and go to state 56
    GT              shift and go to state 57
    LT              shift and go to state 58
    NE              shift and go to state 59
    EQ              shift and go to state 60
    LE              shift and go to state 61
    GE              shift and go to state 62

    operator                       shift and go to state 48
    relop                          shift and go to state 49

state 166

    (45) elseiflist -> ELSEIF LRB exp RRB . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 168
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 167

    (46) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (34) stmt -> . RETURN exp SEMICOLON
    (35) stmt -> . exp SEMICOLON
    (36) stmt -> . block
    (37) stmt -> . vardec
    (38) stmt -> . WHILE LRB exp RRB stmt
    (39) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (44) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . lvalue ASSIGN exp
    (51) exp -> . exp operator exp
    (52) exp -> . relopexp
    (53) exp -> . const
    (54) exp -> . lvalue
    (55) exp -> . ID LRB explist RRB
    (56) exp -> . LRB exp RRB
    (57) exp -> . ID LRB RRB
    (58) exp -> . SUB exp
    (59) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (67) const -> . INTEGERNUMBER
    (68) const -> . FLOATNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 86
    WHILE           shift and go to state 90
    ON              shift and go to state 91
    FOR             shift and go to state 92
    IF              shift and go to state 94
    PRINT           shift and go to state 95
    ID              shift and go to state 93
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 69
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 87
    stmt                           shift and go to state 169
    block                          shift and go to state 88
    vardec                         shift and go to state 89
    lvalue                         shift and go to state 27
    relopexp                       shift and go to state 28
    const                          shift and go to state 29
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 168

    (45) elseiflist -> ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 45 (elseiflist -> ELSEIF LRB exp RRB stmt .)


state 169

    (46) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 46 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for GT in state 28 resolved as shift
WARNING: shift/reduce conflict for LT in state 28 resolved as shift
WARNING: shift/reduce conflict for NE in state 28 resolved as shift
WARNING: shift/reduce conflict for EQ in state 28 resolved as shift
WARNING: shift/reduce conflict for LE in state 28 resolved as shift
WARNING: shift/reduce conflict for GE in state 28 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for SUM in state 67 resolved as shift
WARNING: shift/reduce conflict for SUB in state 67 resolved as shift
WARNING: shift/reduce conflict for MUL in state 67 resolved as shift
WARNING: shift/reduce conflict for DIV in state 67 resolved as shift
WARNING: shift/reduce conflict for MOD in state 67 resolved as shift
WARNING: shift/reduce conflict for GT in state 67 resolved as shift
WARNING: shift/reduce conflict for LT in state 67 resolved as shift
WARNING: shift/reduce conflict for NE in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for LE in state 67 resolved as shift
WARNING: shift/reduce conflict for GE in state 67 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for ON in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for LRB in state 69 resolved as shift
WARNING: shift/reduce conflict for SUB in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT in state 69 resolved as shift
WARNING: shift/reduce conflict for LCB in state 69 resolved as shift
WARNING: shift/reduce conflict for INTEGERNUMBER in state 69 resolved as shift
WARNING: shift/reduce conflict for FLOATNUMBER in state 69 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 69 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for SUM in state 78 resolved as shift
WARNING: shift/reduce conflict for SUB in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for SUM in state 79 resolved as shift
WARNING: shift/reduce conflict for SUB in state 79 resolved as shift
WARNING: shift/reduce conflict for MUL in state 79 resolved as shift
WARNING: shift/reduce conflict for DIV in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for LT in state 79 resolved as shift
WARNING: shift/reduce conflict for NE in state 79 resolved as shift
WARNING: shift/reduce conflict for EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for LE in state 79 resolved as shift
WARNING: shift/reduce conflict for GE in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for SUM in state 81 resolved as shift
WARNING: shift/reduce conflict for SUB in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 93 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 135 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 138 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 158 resolved as shift
WARNING: shift/reduce conflict for ON in state 158 resolved as shift
WARNING: shift/reduce conflict for FOR in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for LRB in state 158 resolved as shift
WARNING: shift/reduce conflict for SUB in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for LCB in state 158 resolved as shift
WARNING: shift/reduce conflict for INTEGERNUMBER in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOATNUMBER in state 158 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 158 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 158 resolved as shift

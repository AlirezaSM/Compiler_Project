
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightP2rightP1leftORleftANDleftEQNEleftLTGTGELEleftSUMSUBleftMULDIVMODleftNOTAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB block\n                    | MAIN LRB RRB blockdeclist : dec\n                   | declist decdec : vardec\n               | funcdectype : INTEGER\n                | FLOAT\n                | BOOLEANiddec : ID\n                 | ID LSB exp RSB\n                 | assign idlist : iddec\n                  | idlist COMMA iddecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n                   | FUNCTION ID LRB paramdecs RRB blockparamdecs : paramdecslist\n                     | paramdecslist : paramdec\n                         | paramdecslist COMMA paramdecparamdec : ID COLON type\n                    | ID LSB RSB COLON typeblock : LCB stmtlist RCB\n                 | LCB RCBstmtlist : stmt\n                    | stmtlist stmtlvalue : ID\n                  | ID LSB exp RSBcase : WHERE const COLON stmtlistcases : case\n                 | cases casestmt : RETURN exp SEMICOLON\n                | exp SEMICOLON\n                | block\n                | vardec\n                | WHILE LRB exp RRB stmt\n                | ON LRB exp RRB LCB cases RCB SEMICOLON\n                | ON LRB exp RRB LCB RCB SEMICOLON\n                | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n                | FOR LRB ID IN ID RRB stmt\n                | IF LRB exp RRB stmt elseiflist\n                | IF LRB exp RRB stmt elseiflist ELSE stmt\n                | PRINT LRB ID RRB SEMICOLONelseiflist : ELSEIF LRB exp RRB stmt\n                      | elseiflist ELSEIF LRB exp RRB stmt\n                      | relopexp : exp relop exp\n                    | relopexp relop expexp : assign\n               | exp operator exp %prec P1\n               | relopexp %prec P2\n               | const\n               | lvalue\n               | ID LRB explist RRB\n               | LRB exp RRB\n               | ID LRB RRB\n               | SUB exp\n               | NOT exp assign : lvalue ASSIGN exp\n        operator : AND\n                    | OR\n                    | SUM\n                    | SUB\n                    | MUL\n                    | DIV\n                    | MODconst : INTEGERNUMBER\n                 | FLOATNUMBER\n                 | TRUE\n                 | FALSErelop : GT\n                 | LT\n                 | NE\n                 | EQ\n                 | LE\n                 | GEexplist : exp\n                   | explist COMMA exp'
    
_lr_action_items = {'MAIN':([0,2,4,5,6,14,46,75,100,113,137,],[3,13,-3,-5,-6,-4,-15,-25,-24,-17,-16,]),'FUNCTION':([0,2,4,5,6,14,46,75,100,113,137,],[8,8,-3,-5,-6,-4,-15,-25,-24,-17,-16,]),'ID':([0,2,4,5,6,8,14,17,19,20,28,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,91,100,101,103,104,105,106,107,108,109,113,116,118,129,131,132,134,137,138,142,143,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[9,9,-3,-5,-6,18,-4,9,29,29,47,29,29,29,84,-15,29,29,29,29,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,29,84,-25,-26,29,-35,-36,47,-24,-27,-34,29,29,122,29,29,125,-17,29,-33,84,29,141,84,-16,-37,-47,-44,29,84,-42,-39,-41,84,29,-38,84,84,-43,29,84,-40,84,84,-45,-46,]),'$end':([1,44,73,75,100,],[0,-2,-1,-25,-24,]),'LRB':([3,13,18,19,20,29,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,81,82,83,84,85,86,100,101,103,104,105,106,107,108,116,118,122,129,131,134,138,142,143,148,149,150,151,154,157,158,159,160,161,162,163,164,165,167,168,170,171,172,173,],[15,21,28,35,35,51,35,35,35,35,-15,35,35,35,35,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,35,35,-25,-26,35,-35,-36,104,105,106,51,108,109,-24,-27,-34,35,35,35,35,35,35,-33,51,35,35,35,-37,-47,-44,35,35,-42,160,-39,-41,35,165,35,-38,35,35,-43,35,35,-40,35,35,-45,-46,]),'COLON':([7,9,10,11,27,29,31,32,33,34,38,39,40,41,42,47,53,71,72,84,87,90,93,96,97,98,99,111,115,117,133,155,],[16,-10,-13,-12,-14,-28,-50,-52,-53,-54,-68,-69,-70,-71,-60,88,-11,-58,-59,-10,-12,112,-57,-51,-48,-49,-56,126,-55,-29,-11,162,]),'COMMA':([7,9,10,11,24,25,26,27,29,31,32,33,34,38,39,40,41,42,49,50,53,71,72,84,87,92,93,94,96,97,98,99,110,114,115,117,128,133,136,],[17,-10,-13,-12,-7,-8,-9,-14,-28,-50,-52,-53,-54,-68,-69,-70,-71,-60,91,-20,-11,-58,-59,-10,-12,116,-57,-78,-51,-48,-49,-56,-22,-21,-55,-29,-79,-11,-23,]),'LSB':([9,29,47,84,122,],[19,52,89,107,52,]),'ASSIGN':([9,12,29,34,53,84,117,122,133,],[-28,20,-28,20,-29,-28,-29,-28,-29,]),'RRB':([15,21,24,25,26,28,29,31,32,33,34,38,39,40,41,42,48,49,50,51,70,71,72,92,93,94,96,97,98,99,110,114,115,117,119,120,124,125,128,136,141,156,166,169,],[22,43,-7,-8,-9,-19,-28,-50,-52,-53,-54,-68,-69,-70,-71,-60,90,-18,-20,93,99,-58,-59,115,-57,-78,-51,-48,-49,-56,-22,-21,-55,-29,129,130,134,135,-79,-23,149,163,170,171,]),'INTEGER':([16,88,112,126,],[24,24,24,24,]),'FLOAT':([16,88,112,126,],[25,25,25,25,]),'BOOLEAN':([16,88,112,126,],[26,26,26,26,]),'SUB':([19,20,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,84,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,115,116,117,118,119,120,121,122,123,124,128,129,131,133,134,138,140,142,143,148,149,150,154,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,],[36,36,-28,59,-50,-52,-53,-54,36,36,36,-68,-69,-70,-71,59,36,-15,36,36,36,36,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,36,59,-58,-59,36,-25,-26,36,59,-35,-36,-28,-50,-57,59,59,59,59,59,-56,-24,-27,59,-34,36,36,36,36,36,-55,36,-29,-33,59,59,59,-28,59,59,59,36,36,-29,36,-37,59,-47,-44,36,36,-42,-39,59,-41,36,36,-38,36,36,-43,36,59,36,-40,59,36,36,-45,-46,]),'NOT':([19,20,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,100,101,103,104,105,106,107,108,116,118,129,131,134,138,142,143,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[37,37,37,37,37,37,-15,37,37,37,37,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,37,37,-25,-26,37,-35,-36,-24,-27,-34,37,37,37,37,37,37,-33,37,37,37,-37,-47,-44,37,37,-42,-39,-41,37,37,-38,37,37,-43,37,37,-40,37,37,-45,-46,]),'INTEGERNUMBER':([19,20,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,100,101,103,104,105,106,107,108,116,118,129,131,134,138,142,143,147,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[38,38,38,38,38,38,-15,38,38,38,38,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,38,38,-25,-26,38,-35,-36,-24,-27,-34,38,38,38,38,38,38,-33,38,38,38,-37,-47,-44,38,38,38,-42,-39,-41,38,38,-38,38,38,-43,38,38,-40,38,38,-45,-46,]),'FLOATNUMBER':([19,20,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,100,101,103,104,105,106,107,108,116,118,129,131,134,138,142,143,147,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[39,39,39,39,39,39,-15,39,39,39,39,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,39,39,-25,-26,39,-35,-36,-24,-27,-34,39,39,39,39,39,39,-33,39,39,39,-37,-47,-44,39,39,39,-42,-39,-41,39,39,-38,39,39,-43,39,39,-40,39,39,-45,-46,]),'TRUE':([19,20,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,100,101,103,104,105,106,107,108,116,118,129,131,134,138,142,143,147,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[40,40,40,40,40,40,-15,40,40,40,40,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,40,40,-25,-26,40,-35,-36,-24,-27,-34,40,40,40,40,40,40,-33,40,40,40,-37,-47,-44,40,40,40,-42,-39,-41,40,40,-38,40,40,-43,40,40,-40,40,40,-45,-46,]),'FALSE':([19,20,35,36,37,45,46,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,75,76,77,79,80,100,101,103,104,105,106,107,108,116,118,129,131,134,138,142,143,147,148,149,150,154,157,158,160,161,162,163,164,165,167,168,170,171,172,173,],[41,41,41,41,41,41,-15,41,41,41,41,-61,-62,-63,-64,-65,-66,-67,-72,-73,-74,-75,-76,-77,41,41,-25,-26,41,-35,-36,-24,-27,-34,41,41,41,41,41,41,-33,41,41,41,-37,-47,-44,41,41,41,-42,-39,-41,41,41,-38,41,41,-43,41,41,-40,41,41,-45,-46,]),'LCB':([22,24,25,26,43,45,46,74,75,76,79,80,90,100,101,103,118,127,129,130,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[45,-7,-8,-9,45,45,-15,45,-25,-26,-35,-36,45,-24,-27,-34,-33,45,45,139,45,-37,-47,-44,45,-42,-39,-41,45,-38,45,45,-43,45,-40,45,45,-45,-46,]),'SEMICOLON':([23,24,25,26,29,31,32,33,34,38,39,40,41,42,71,72,78,84,87,93,96,97,98,99,102,115,117,121,122,133,135,140,145,152,],[46,-7,-8,-9,-28,-50,-52,-53,-54,-68,-69,-70,-71,-60,-58,-59,103,-28,-50,-57,-51,-48,-49,-56,118,-55,-29,131,-28,-29,143,148,154,161,]),'RSB':([29,30,31,32,33,34,38,39,40,41,42,71,72,89,93,95,96,97,98,99,115,117,123,],[-28,53,-50,-52,-53,-54,-68,-69,-70,-71,-60,-58,-59,111,-57,117,-51,-48,-49,-56,-55,-29,133,]),'AND':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,56,-50,-52,-53,-54,-68,-69,-70,-71,56,56,-58,-59,56,-28,-50,-57,56,56,56,56,56,-56,56,-55,-29,56,56,56,-28,56,56,56,-29,56,56,56,56,]),'OR':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,57,-50,-52,-53,-54,-68,-69,-70,-71,57,57,-58,-59,57,-28,-50,-57,57,57,57,57,57,-56,57,-55,-29,57,57,57,-28,57,57,57,-29,57,57,57,57,]),'SUM':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,58,-50,-52,-53,-54,-68,-69,-70,-71,58,58,-58,-59,58,-28,-50,-57,58,58,58,58,58,-56,58,-55,-29,58,58,58,-28,58,58,58,-29,58,58,58,58,]),'MUL':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,60,-50,-52,-53,-54,-68,-69,-70,-71,60,60,60,-59,60,-28,-50,-57,60,60,60,60,60,-56,60,-55,-29,60,60,60,-28,60,60,60,-29,60,60,60,60,]),'DIV':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,61,-50,-52,-53,-54,-68,-69,-70,-71,61,61,61,-59,61,-28,-50,-57,61,61,61,61,61,-56,61,-55,-29,61,61,61,-28,61,61,61,-29,61,61,61,61,]),'MOD':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,62,-50,-52,-53,-54,-68,-69,-70,-71,62,62,62,-59,62,-28,-50,-57,62,62,62,62,62,-56,62,-55,-29,62,62,62,-28,62,62,62,-29,62,62,62,62,]),'GT':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,63,-50,63,-53,-54,-68,-69,-70,-71,63,63,-58,-59,63,-28,-50,-57,63,63,63,63,63,-56,63,-55,-29,63,63,63,-28,63,63,63,-29,63,63,63,63,]),'LT':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,64,-50,64,-53,-54,-68,-69,-70,-71,64,64,-58,-59,64,-28,-50,-57,64,64,64,64,64,-56,64,-55,-29,64,64,64,-28,64,64,64,-29,64,64,64,64,]),'NE':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,65,-50,65,-53,-54,-68,-69,-70,-71,65,65,-58,-59,65,-28,-50,-57,65,65,65,65,65,-56,65,-55,-29,65,65,65,-28,65,65,65,-29,65,65,65,65,]),'EQ':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,66,-50,66,-53,-54,-68,-69,-70,-71,66,66,-58,-59,66,-28,-50,-57,66,66,66,66,66,-56,66,-55,-29,66,66,66,-28,66,66,66,-29,66,66,66,66,]),'LE':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,67,-50,67,-53,-54,-68,-69,-70,-71,67,67,-58,-59,67,-28,-50,-57,67,67,67,67,67,-56,67,-55,-29,67,67,67,-28,67,67,67,-29,67,67,67,67,]),'GE':([29,30,31,32,33,34,38,39,40,41,42,70,71,72,78,84,87,93,94,95,96,97,98,99,102,115,117,119,120,121,122,123,124,128,133,140,156,166,169,],[-28,68,-50,68,-53,-54,-68,-69,-70,-71,68,68,-58,-59,68,-28,-50,-57,68,68,68,68,68,-56,68,-55,-29,68,68,68,-28,68,68,68,-29,68,68,68,68,]),'RCB':([45,46,74,75,76,79,80,100,101,103,118,138,139,142,143,144,146,150,153,154,157,161,164,167,168,172,173,],[75,-15,100,-25,-26,-35,-36,-24,-27,-34,-33,-37,145,-47,-44,152,-31,-42,-32,-39,-41,-38,-43,-30,-40,-45,-46,]),'RETURN':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[77,-15,77,-25,-26,-35,-36,-24,-27,-34,-33,77,77,-37,-47,-44,77,-42,-39,-41,77,-38,77,77,-43,77,-40,77,77,-45,-46,]),'WHILE':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[81,-15,81,-25,-26,-35,-36,-24,-27,-34,-33,81,81,-37,-47,-44,81,-42,-39,-41,81,-38,81,81,-43,81,-40,81,81,-45,-46,]),'ON':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[82,-15,82,-25,-26,-35,-36,-24,-27,-34,-33,82,82,-37,-47,-44,82,-42,-39,-41,82,-38,82,82,-43,82,-40,82,82,-45,-46,]),'FOR':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[83,-15,83,-25,-26,-35,-36,-24,-27,-34,-33,83,83,-37,-47,-44,83,-42,-39,-41,83,-38,83,83,-43,83,-40,83,83,-45,-46,]),'IF':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[85,-15,85,-25,-26,-35,-36,-24,-27,-34,-33,85,85,-37,-47,-44,85,-42,-39,-41,85,-38,85,85,-43,85,-40,85,85,-45,-46,]),'PRINT':([45,46,74,75,76,79,80,100,101,103,118,129,134,138,142,143,149,150,154,157,158,161,162,163,164,167,168,170,171,172,173,],[86,-15,86,-25,-26,-35,-36,-24,-27,-34,-33,86,86,-37,-47,-44,86,-42,-39,-41,86,-38,86,86,-43,86,-40,86,86,-45,-46,]),'ELSEIF':([46,75,79,80,100,103,118,138,142,143,150,154,157,161,164,168,172,173,],[-15,-25,-35,-36,-24,-34,-33,-37,151,-44,159,-39,-41,-38,-43,-40,-45,-46,]),'ELSE':([46,75,79,80,100,103,118,138,142,143,150,154,157,161,164,168,172,173,],[-15,-25,-35,-36,-24,-34,-33,-37,-47,-44,158,-39,-41,-38,-43,-40,-45,-46,]),'WHERE':([46,75,76,79,80,100,101,103,118,138,139,142,143,144,146,150,153,154,157,161,164,167,168,172,173,],[-15,-25,-26,-35,-36,-24,-27,-34,-33,-37,147,-47,-44,147,-31,-42,-32,-39,-41,-38,-43,-30,-40,-45,-46,]),'IN':([122,],[132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'dec':([0,2,],[4,14,]),'vardec':([0,2,45,74,129,134,149,158,162,163,167,170,171,],[5,5,80,80,80,80,80,80,80,80,80,80,80,]),'funcdec':([0,2,],[6,6,]),'idlist':([0,2,45,74,129,134,149,158,162,163,167,170,171,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'iddec':([0,2,17,45,74,129,134,149,158,162,163,167,170,171,],[10,10,27,10,10,10,10,10,10,10,10,10,10,10,]),'assign':([0,2,17,19,20,35,36,37,45,51,52,54,55,69,74,77,104,105,106,107,108,116,129,131,134,148,149,158,160,162,163,165,167,170,171,],[11,11,11,31,31,31,31,31,87,31,31,31,31,31,87,31,31,31,31,31,31,31,87,31,87,31,87,87,31,87,87,31,87,87,87,]),'lvalue':([0,2,17,19,20,35,36,37,45,51,52,54,55,69,74,77,104,105,106,107,108,116,129,131,134,148,149,158,160,162,163,165,167,170,171,],[12,12,12,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'type':([16,88,112,126,],[23,110,127,136,]),'exp':([19,20,35,36,37,45,51,52,54,55,69,74,77,104,105,106,107,108,116,129,131,134,148,149,158,160,162,163,165,167,170,171,],[30,42,70,71,72,78,94,95,96,97,98,78,102,119,120,121,123,124,128,78,140,78,156,78,78,166,78,78,169,78,78,78,]),'relopexp':([19,20,35,36,37,45,51,52,54,55,69,74,77,104,105,106,107,108,116,129,131,134,148,149,158,160,162,163,165,167,170,171,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'const':([19,20,35,36,37,45,51,52,54,55,69,74,77,104,105,106,107,108,116,129,131,134,147,148,149,158,160,162,163,165,167,170,171,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,155,33,33,33,33,33,33,33,33,33,33,]),'block':([22,43,45,74,90,127,129,134,149,158,162,163,167,170,171,],[44,73,79,79,113,137,79,79,79,79,79,79,79,79,79,]),'paramdecs':([28,],[48,]),'paramdecslist':([28,],[49,]),'paramdec':([28,91,],[50,114,]),'operator':([30,42,70,71,72,78,94,95,96,97,98,102,119,120,121,123,124,128,140,156,166,169,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'relop':([30,32,42,70,71,72,78,94,95,96,97,98,102,119,120,121,123,124,128,140,156,166,169,],[55,69,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'stmtlist':([45,162,],[74,167,]),'stmt':([45,74,129,134,149,158,162,163,167,170,171,],[76,101,138,142,157,164,76,168,101,172,173,]),'explist':([51,],[92,]),'cases':([139,],[144,]),'case':([139,144,],[146,153,]),'elseiflist':([142,],[150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','pparser.py',12),
  ('program -> MAIN LRB RRB block','program',4,'p_program','pparser.py',13),
  ('declist -> dec','declist',1,'p_declist','pparser.py',17),
  ('declist -> declist dec','declist',2,'p_declist','pparser.py',18),
  ('dec -> vardec','dec',1,'p_dec','pparser.py',22),
  ('dec -> funcdec','dec',1,'p_dec','pparser.py',23),
  ('type -> INTEGER','type',1,'p_type','pparser.py',27),
  ('type -> FLOAT','type',1,'p_type','pparser.py',28),
  ('type -> BOOLEAN','type',1,'p_type','pparser.py',29),
  ('iddec -> ID','iddec',1,'p_iddec','pparser.py',33),
  ('iddec -> ID LSB exp RSB','iddec',4,'p_iddec','pparser.py',34),
  ('iddec -> assign','iddec',1,'p_iddec','pparser.py',35),
  ('idlist -> iddec','idlist',1,'p_idlist','pparser.py',39),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','pparser.py',40),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec','pparser.py',44),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','pparser.py',48),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','pparser.py',49),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','pparser.py',53),
  ('paramdecs -> <empty>','paramdecs',0,'p_paramdecs','pparser.py',54),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','pparser.py',58),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','pparser.py',59),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec','pparser.py',63),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','pparser.py',64),
  ('block -> LCB stmtlist RCB','block',3,'p_block','pparser.py',68),
  ('block -> LCB RCB','block',2,'p_block','pparser.py',69),
  ('stmtlist -> stmt','stmtlist',1,'p_stmtlist','pparser.py',73),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','pparser.py',74),
  ('lvalue -> ID','lvalue',1,'p_lvalue','pparser.py',78),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','pparser.py',79),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','pparser.py',83),
  ('cases -> case','cases',1,'p_cases','pparser.py',87),
  ('cases -> cases case','cases',2,'p_cases','pparser.py',88),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt','pparser.py',92),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt','pparser.py',93),
  ('stmt -> block','stmt',1,'p_stmt','pparser.py',94),
  ('stmt -> vardec','stmt',1,'p_stmt','pparser.py',95),
  ('stmt -> WHILE LRB exp RRB stmt','stmt',5,'p_stmt','pparser.py',96),
  ('stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON','stmt',8,'p_stmt','pparser.py',97),
  ('stmt -> ON LRB exp RRB LCB RCB SEMICOLON','stmt',7,'p_stmt','pparser.py',98),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt','pparser.py',99),
  ('stmt -> FOR LRB ID IN ID RRB stmt','stmt',7,'p_stmt','pparser.py',100),
  ('stmt -> IF LRB exp RRB stmt elseiflist','stmt',6,'p_stmt','pparser.py',101),
  ('stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt','stmt',8,'p_stmt','pparser.py',102),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt','pparser.py',103),
  ('elseiflist -> ELSEIF LRB exp RRB stmt','elseiflist',5,'p_elseiflist','pparser.py',107),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','pparser.py',108),
  ('elseiflist -> <empty>','elseiflist',0,'p_elseiflist','pparser.py',109),
  ('relopexp -> exp relop exp','relopexp',3,'p_relopexp','pparser.py',113),
  ('relopexp -> relopexp relop exp','relopexp',3,'p_relopexp','pparser.py',114),
  ('exp -> assign','exp',1,'p_exp','pparser.py',118),
  ('exp -> exp operator exp','exp',3,'p_exp','pparser.py',119),
  ('exp -> relopexp','exp',1,'p_exp','pparser.py',120),
  ('exp -> const','exp',1,'p_exp','pparser.py',121),
  ('exp -> lvalue','exp',1,'p_exp','pparser.py',122),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','pparser.py',123),
  ('exp -> LRB exp RRB','exp',3,'p_exp','pparser.py',124),
  ('exp -> ID LRB RRB','exp',3,'p_exp','pparser.py',125),
  ('exp -> SUB exp','exp',2,'p_exp','pparser.py',126),
  ('exp -> NOT exp','exp',2,'p_exp','pparser.py',127),
  ('assign -> lvalue ASSIGN exp','assign',3,'p_assign','pparser.py',131),
  ('operator -> AND','operator',1,'p_operator','pparser.py',136),
  ('operator -> OR','operator',1,'p_operator','pparser.py',137),
  ('operator -> SUM','operator',1,'p_operator','pparser.py',138),
  ('operator -> SUB','operator',1,'p_operator','pparser.py',139),
  ('operator -> MUL','operator',1,'p_operator','pparser.py',140),
  ('operator -> DIV','operator',1,'p_operator','pparser.py',141),
  ('operator -> MOD','operator',1,'p_operator','pparser.py',142),
  ('const -> INTEGERNUMBER','const',1,'p_const','pparser.py',146),
  ('const -> FLOATNUMBER','const',1,'p_const','pparser.py',147),
  ('const -> TRUE','const',1,'p_const','pparser.py',148),
  ('const -> FALSE','const',1,'p_const','pparser.py',149),
  ('relop -> GT','relop',1,'p_relop','pparser.py',153),
  ('relop -> LT','relop',1,'p_relop','pparser.py',154),
  ('relop -> NE','relop',1,'p_relop','pparser.py',155),
  ('relop -> EQ','relop',1,'p_relop','pparser.py',156),
  ('relop -> LE','relop',1,'p_relop','pparser.py',157),
  ('relop -> GE','relop',1,'p_relop','pparser.py',158),
  ('explist -> exp','explist',1,'p_explist','pparser.py',162),
  ('explist -> explist COMMA exp','explist',3,'p_explist','pparser.py',163),
]
